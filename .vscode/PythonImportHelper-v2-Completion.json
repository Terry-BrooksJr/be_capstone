[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "IPRestrictionMiddleware",
        "importPath": "byte_patrol.middleware",
        "description": "byte_patrol.middleware",
        "isExtraImport": true,
        "detail": "byte_patrol.middleware",
        "documentation": {}
    },
    {
        "label": "IPAllowList",
        "importPath": "byte_patrol.models",
        "description": "byte_patrol.models",
        "isExtraImport": true,
        "detail": "byte_patrol.models",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "validate_ipv46_address",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "ipaddress",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipaddress",
        "description": "ipaddress",
        "detail": "ipaddress",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "QueryDict",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "MiddlewareMixin",
        "importPath": "django.utils.deprecation",
        "description": "django.utils.deprecation",
        "isExtraImport": true,
        "detail": "django.utils.deprecation",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "post_delete",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_delete",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "override_settings",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "RequestFactory",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "testing_protected",
        "importPath": "applications.byte_patrol.tests",
        "description": "applications.byte_patrol.tests",
        "isExtraImport": true,
        "detail": "applications.byte_patrol.tests",
        "documentation": {}
    },
    {
        "label": "testing_unprotected",
        "importPath": "applications.byte_patrol.tests",
        "description": "applications.byte_patrol.tests",
        "isExtraImport": true,
        "detail": "applications.byte_patrol.tests",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "applications.models",
        "description": "applications.models",
        "isExtraImport": true,
        "detail": "applications.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "applications.models",
        "description": "applications.models",
        "isExtraImport": true,
        "detail": "applications.models",
        "documentation": {}
    },
    {
        "label": "bookings",
        "importPath": "mock.data",
        "description": "mock.data",
        "isExtraImport": true,
        "detail": "mock.data",
        "documentation": {}
    },
    {
        "label": "menu",
        "importPath": "mock.data",
        "description": "mock.data",
        "isExtraImport": true,
        "detail": "mock.data",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "OpenApiTypes",
        "importPath": "drf_spectacular.types",
        "description": "drf_spectacular.types",
        "isExtraImport": true,
        "detail": "drf_spectacular.types",
        "documentation": {}
    },
    {
        "label": "OpenApiTypes",
        "importPath": "drf_spectacular.types",
        "description": "drf_spectacular.types",
        "isExtraImport": true,
        "detail": "drf_spectacular.types",
        "documentation": {}
    },
    {
        "label": "OpenApiExample",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema_field",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema_serializer",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiExample",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiParameter",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "UniqueTogetherValidator",
        "importPath": "rest_framework.validators",
        "description": "rest_framework.validators",
        "isExtraImport": true,
        "detail": "rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "BookingSerializer",
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "isExtraImport": true,
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "BookingSerializer",
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "isExtraImport": true,
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "MenuSerializer",
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "isExtraImport": true,
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "setup_loguru",
        "importPath": "utils.logging",
        "description": "utils.logging",
        "isExtraImport": true,
        "detail": "utils.logging",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "BookingFilter",
        "importPath": "applications.resturant.filters",
        "description": "applications.resturant.filters",
        "isExtraImport": true,
        "detail": "applications.resturant.filters",
        "documentation": {}
    },
    {
        "label": "ProductFilter",
        "importPath": "applications.resturant.filters",
        "description": "applications.resturant.filters",
        "isExtraImport": true,
        "detail": "applications.resturant.filters",
        "documentation": {}
    },
    {
        "label": "CachedResponseMixin",
        "importPath": "utils.cache",
        "description": "utils.cache",
        "isExtraImport": true,
        "detail": "utils.cache",
        "documentation": {}
    },
    {
        "label": "CharFilter",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "DateFilter",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "FilterSet",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "NumberFilter",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "TimeFilter",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "BookingFilterFormHelper",
        "importPath": "applications.resturant.forms",
        "description": "applications.resturant.forms",
        "isExtraImport": true,
        "detail": "applications.resturant.forms",
        "documentation": {}
    },
    {
        "label": "MenuFilterFormHelper",
        "importPath": "applications.resturant.forms",
        "description": "applications.resturant.forms",
        "isExtraImport": true,
        "detail": "applications.resturant.forms",
        "documentation": {}
    },
    {
        "label": "FormHelper",
        "importPath": "crispy_forms.helper",
        "description": "crispy_forms.helper",
        "isExtraImport": true,
        "detail": "crispy_forms.helper",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Layout",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Row",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Submit",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "Index",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "SpectacularAPIView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularRedocView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularSwaggerView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "endpoints",
        "importPath": "applications.resturant",
        "description": "applications.resturant",
        "isExtraImport": true,
        "detail": "applications.resturant",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "environ",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Configuration",
        "importPath": "configurations",
        "description": "configurations",
        "isExtraImport": true,
        "detail": "configurations",
        "documentation": {}
    },
    {
        "label": "debug_toolbar_urls",
        "importPath": "debug_toolbar.toolbar",
        "description": "debug_toolbar.toolbar",
        "isExtraImport": true,
        "detail": "debug_toolbar.toolbar",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "Index",
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "isExtraImport": true,
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "handler_page_not_found_404",
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "isExtraImport": true,
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "handler_server_error_500",
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "isExtraImport": true,
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "configurations.wsgi",
        "description": "configurations.wsgi",
        "isExtraImport": true,
        "detail": "configurations.wsgi",
        "documentation": {}
    },
    {
        "label": "S3Boto3Storage",
        "importPath": "storages.backends.s3boto3",
        "description": "storages.backends.s3boto3",
        "isExtraImport": true,
        "detail": "storages.backends.s3boto3",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http.response",
        "description": "django.http.response",
        "isExtraImport": true,
        "detail": "django.http.response",
        "documentation": {}
    },
    {
        "label": "TemplateResponse",
        "importPath": "django.template.response",
        "description": "django.template.response",
        "isExtraImport": true,
        "detail": "django.template.response",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "cache_page",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {}
    },
    {
        "label": "never_cache",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "has",
        "importPath": "zmq",
        "description": "zmq",
        "isExtraImport": true,
        "detail": "zmq",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.bin.jp",
        "description": ".venv.bin.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": ".venv.bin.jp",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "applications.byte_patrol.management.commands.add_ip_to_allowlist",
        "description": "applications.byte_patrol.management.commands.add_ip_to_allowlist",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Add an IP address to the allow list\"\n    def add_arguments(self, parser):\n        parser.add_argument(\"ip_address\", type=str, help=\"IP address to add\")\n        parser.add_argument(\"--description\", type=str, help=\"Description for this IP\")\n    def handle(self, *args, **options):\n        ip_address = options[\"ip_address\"]\n        description = options.get(\"description\", \"\")\n        # Try to find existing entry\n        ip_entry, created = IPAllowList.objects.update_or_create(",
        "detail": "applications.byte_patrol.management.commands.add_ip_to_allowlist",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.byte_patrol.migrations.0001_initial",
        "description": "applications.byte_patrol.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"IPAllowList\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(",
        "detail": "applications.byte_patrol.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "IPAllowListAdmin",
        "kind": 6,
        "importPath": "applications.byte_patrol.admin",
        "description": "applications.byte_patrol.admin",
        "peekOfCode": "class IPAllowListAdmin(admin.ModelAdmin):\n    list_display = (\"ip_address\", \"description\", \"is_active\", \"updated_at\")\n    list_filter = (\"is_active\",)\n    search_fields = (\"ip_address\", \"description\")\n    readonly_fields = (\"created_at\", \"updated_at\")\n@admin.register(ProtectedPath)\nclass ProtectedPathAdmin(admin.ModelAdmin):\n    list_display = (\"path_pattern\", \"description\", \"is_active\", \"updated_at\")\n    list_filter = (\"is_active\",)\n    search_fields = (\"path_pattern\", \"description\")",
        "detail": "applications.byte_patrol.admin",
        "documentation": {}
    },
    {
        "label": "ProtectedPathAdmin",
        "kind": 6,
        "importPath": "applications.byte_patrol.admin",
        "description": "applications.byte_patrol.admin",
        "peekOfCode": "class ProtectedPathAdmin(admin.ModelAdmin):\n    list_display = (\"path_pattern\", \"description\", \"is_active\", \"updated_at\")\n    list_filter = (\"is_active\",)\n    search_fields = (\"path_pattern\", \"description\")\n    readonly_fields = (\"created_at\", \"updated_at\")",
        "detail": "applications.byte_patrol.admin",
        "documentation": {}
    },
    {
        "label": "BytePatrolConfig",
        "kind": 6,
        "importPath": "applications.byte_patrol.apps",
        "description": "applications.byte_patrol.apps",
        "peekOfCode": "class BytePatrolConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"applications.byte_patrol\"\n    def ready(self):\n        # Import signal handlers\n        pass",
        "detail": "applications.byte_patrol.apps",
        "documentation": {}
    },
    {
        "label": "IPRestrictionMiddleware",
        "kind": 6,
        "importPath": "applications.byte_patrol.middleware",
        "description": "applications.byte_patrol.middleware",
        "peekOfCode": "class IPRestrictionMiddleware(MiddlewareMixin):\n    \"\"\"Middleware that restricts access to protected paths based on client IP address.\n    This middleware checks incoming requests against an allow list of IP addresses and protected URL patterns, denying access if the client's IP is not permitted.\n    \"\"\"\n    CACHE_KEY_ALLOWED_IPS = \"ip_restriction_allowed_ips\"\n    CACHE_KEY_PROTECTED_PATHS = \"ip_restriction_protected_paths\"\n    CACHE_TIMEOUT = getattr(\n        settings, \"BYTE_PATROL_CACHE_TIMEOUT\", 300\n    )  # 5 minutes default\n    def __init__(self, get_response=None):",
        "detail": "applications.byte_patrol.middleware",
        "documentation": {}
    },
    {
        "label": "IPAllowList",
        "kind": 6,
        "importPath": "applications.byte_patrol.models",
        "description": "applications.byte_patrol.models",
        "peekOfCode": "class IPAllowList(models.Model):\n    \"\"\"Represents an IP address or CIDR block that is allowed access to protected resources.\n    This model stores individual IP addresses or CIDR notations, along with optional descriptions and activation status.\n    \"\"\"\n    ip_address = models.CharField(\n        max_length=50,\n        unique=True,\n        validators=[validate_ipv46_address],\n        help_text=\"IP address in IPv4 or IPv6 format\",\n    )",
        "detail": "applications.byte_patrol.models",
        "documentation": {}
    },
    {
        "label": "ProtectedPath",
        "kind": 6,
        "importPath": "applications.byte_patrol.models",
        "description": "applications.byte_patrol.models",
        "peekOfCode": "class ProtectedPath(models.Model):\n    \"\"\"Represents a URL pattern that is protected by IP restrictions.\n    This model defines URL patterns that require IP allow list checks, with optional descriptions and activation status.\n    \"\"\"\n    path_pattern = models.CharField(\n        max_length=255, help_text=\"URL pattern to restrict (can use regex patterns)\"\n    )\n    description = models.CharField(\n        max_length=255, blank=True, help_text=\"Description of what this path protects\"\n    )",
        "detail": "applications.byte_patrol.models",
        "documentation": {}
    },
    {
        "label": "invalidate_ip_restriction_cache",
        "kind": 2,
        "importPath": "applications.byte_patrol.signals",
        "description": "applications.byte_patrol.signals",
        "peekOfCode": "def invalidate_ip_restriction_cache(sender, **kwargs):\n    \"\"\"\n    Invalidate the cache when IP allow list or protected paths are modified.\n    \"\"\"\n    IPRestrictionMiddleware().invalidate_cache()",
        "detail": "applications.byte_patrol.signals",
        "documentation": {}
    },
    {
        "label": "BytePatrolAccessTests",
        "kind": 6,
        "importPath": "applications.byte_patrol.tests",
        "description": "applications.byte_patrol.tests",
        "peekOfCode": "class BytePatrolAccessTests(TestCase):\n    def setUp(self):\n        self.client = Client()\n        # Example: set up allowed and disallowed IPs\n        self.allowed_ip = \"192.168.1.1\"\n        self.disallowed_ip = \"10.0.0.1\"\n        # Example protected and unprotected paths\n        self.protected_path = \"/byte_patrol/protected/\"\n        self.unprotected_path = \"/byte_patrol/public/\"\n    @override_settings(BYTE_PATROL_ALLOWED_IPS=[\"192.168.1.1\"])",
        "detail": "applications.byte_patrol.tests",
        "documentation": {}
    },
    {
        "label": "testing_unprotected",
        "kind": 2,
        "importPath": "applications.byte_patrol.tests",
        "description": "applications.byte_patrol.tests",
        "peekOfCode": "def testing_unprotected(request):\n    return HttpResponse(\"This is an unprotected view.\", status=200)\ndef testing_protected(request):\n    return HttpResponse(\"This is a protected view.\", status=200)\nclass BytePatrolAccessTests(TestCase):\n    def setUp(self):\n        self.client = Client()\n        # Example: set up allowed and disallowed IPs\n        self.allowed_ip = \"192.168.1.1\"\n        self.disallowed_ip = \"10.0.0.1\"",
        "detail": "applications.byte_patrol.tests",
        "documentation": {}
    },
    {
        "label": "testing_protected",
        "kind": 2,
        "importPath": "applications.byte_patrol.tests",
        "description": "applications.byte_patrol.tests",
        "peekOfCode": "def testing_protected(request):\n    return HttpResponse(\"This is a protected view.\", status=200)\nclass BytePatrolAccessTests(TestCase):\n    def setUp(self):\n        self.client = Client()\n        # Example: set up allowed and disallowed IPs\n        self.allowed_ip = \"192.168.1.1\"\n        self.disallowed_ip = \"10.0.0.1\"\n        # Example protected and unprotected paths\n        self.protected_path = \"/byte_patrol/protected/\"",
        "detail": "applications.byte_patrol.tests",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "applications.byte_patrol.urls",
        "description": "applications.byte_patrol.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"protected/\", testing_protected, name=\"byte_patrol_protected\"),\n    path(\"public/\", testing_unprotected, name=\"byte_patrol_public\"),\n]",
        "detail": "applications.byte_patrol.urls",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "applications.resturant.management.commands.seed",
        "description": "applications.resturant.management.commands.seed",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Seeds the database with sample data\"\n    requires_migrations_checks = True\n    output_transaction = True\n    def handle(self, *args, **options):\n        if options[\"no-bookings\"]:\n            seed_menu\n        elif options[\"no-menu\"]:\n            seed_bookings()\n        else:",
        "detail": "applications.resturant.management.commands.seed",
        "documentation": {}
    },
    {
        "label": "seed_bookings",
        "kind": 2,
        "importPath": "applications.resturant.management.commands.seed",
        "description": "applications.resturant.management.commands.seed",
        "peekOfCode": "def seed_bookings():\n    \"\"\"Seeds the Booking table with sample data.\"\"\"\n    booking_objects = []\n    for booking in bookings:\n        json.loads(booking)\n        booking_objects.append(\n            Booking(\n                name=booking.name,\n                no_of_guests=booking.no_of_guests,\n                booking_date=booking.booking_date,",
        "detail": "applications.resturant.management.commands.seed",
        "documentation": {}
    },
    {
        "label": "seed_menu",
        "kind": 2,
        "importPath": "applications.resturant.management.commands.seed",
        "description": "applications.resturant.management.commands.seed",
        "peekOfCode": "def seed_menu():\n    \"\"\"Seeds the Menu table with sample data.\"\"\"\n    menu_items_objects = []\n    for item in menu:\n        json.loads(item)\n        menu_items_objects.append(\n            Menu(title=item.title, price=item.price, inventory=item.inventory)\n        )\n    Menu.objects.bulk_create(menu_items_objects)\n    print(\"Menu seeded successfully!\")",
        "detail": "applications.resturant.management.commands.seed",
        "documentation": {}
    },
    {
        "label": "seed_all",
        "kind": 2,
        "importPath": "applications.resturant.management.commands.seed",
        "description": "applications.resturant.management.commands.seed",
        "peekOfCode": "def seed_all():\n    \"\"\"Seeds all tables with sample data.\"\"\"\n    if seed_bookings() and seed_menu():\n        print(\"All data seeded successfully!\")\n        return True\n    else:\n        print(\"Failed to seed data!\")\n        return False\nclass Command(BaseCommand):\n    help = \"Seeds the database with sample data\"",
        "detail": "applications.resturant.management.commands.seed",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.resturant.migrations.0001_initial",
        "description": "applications.resturant.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"Booking\",\n            fields=[\n                (\n                    \"booking_id\",\n                    models.SmallAutoField(",
        "detail": "applications.resturant.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.resturant.migrations.0002_alter_booking_date",
        "description": "applications.resturant.migrations.0002_alter_booking_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"resturant\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"booking\",\n            name=\"date\",\n            field=models.DateTimeField(verbose_name=\"Date of Booking\"),\n        ),",
        "detail": "applications.resturant.migrations.0002_alter_booking_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.resturant.migrations.0003_booking_idx_name_menu_idx_title_and_more",
        "description": "applications.resturant.migrations.0003_booking_idx_name_menu_idx_title_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"resturant\", \"0002_alter_booking_date\"),\n    ]\n    operations = [\n        migrations.AddIndex(\n            model_name=\"booking\",\n            index=models.Index(fields=[\"name\"], name=\"idx_name\"),\n        ),\n        migrations.AddIndex(",
        "detail": "applications.resturant.migrations.0003_booking_idx_name_menu_idx_title_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.resturant.migrations.0004_alter_booking_no_of_guests",
        "description": "applications.resturant.migrations.0004_alter_booking_no_of_guests",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"resturant\", \"0003_booking_idx_name_menu_idx_title_and_more\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"booking\",\n            name=\"no_of_guests\",\n            field=models.PositiveSmallIntegerField(\n                default=0, verbose_name=\"Party Size\"",
        "detail": "applications.resturant.migrations.0004_alter_booking_no_of_guests",
        "documentation": {}
    },
    {
        "label": "DateTimeParsingMixin",
        "kind": 6,
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "peekOfCode": "class DateTimeParsingMixin:\n    def parse_datetime_fields(self, data, request):\n        \"\"\"Parses and validates date and time fields from input data.\n        Ensures date and time are present, valid, and in the future, then combines them into a datetime object.\n        Args:\n            data: The input data containing date and time fields.\n            request: The HTTP request object.\n        Returns:\n            dict: The updated data with a combined datetime object in the 'date' field.\n        Raises:",
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "MenuSerializer",
        "kind": 6,
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "peekOfCode": "class MenuSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for Menu objects.\n    Serializes and deserializes menu item data.\n    \"\"\"\n    item_id = serializers.IntegerField(\n        read_only=True, help_text=\"Unique identifier for the menu item\"\n    )\n    title = serializers.CharField(max_length=255, help_text=\"Name of the menu item\")\n    price = serializers.DecimalField(\n        max_digits=6,",
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "BookingSerializer",
        "kind": 6,
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "peekOfCode": "class BookingSerializer(DateTimeParsingMixin, serializers.ModelSerializer):\n    \"\"\"Serializer for Booking objects.\"\"\"\n    booking_id = serializers.IntegerField(\n        read_only=True, help_text=\"Unique identifier for the booking\"\n    )\n    name = serializers.CharField(\n        label=\"Reservation Name\",\n        max_length=255,\n        min_length=5,\n        allow_null=False,",
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "validate_date_in_future",
        "kind": 2,
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "peekOfCode": "def validate_date_in_future(\n    value: DT.datetime,\n) -> Union[None, serializers.ValidationError]:\n    \"\"\"Check if the booking date is in the future.\n    Args:\n        booking_date (datetime): The date of the booking\n    Returns:\n        bool: True if the booking date is in the future, False otherwise\n    \"\"\"\n    if not value > TIMEZONE_AWARE_NOW():",
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "party_size_validator",
        "kind": 2,
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "peekOfCode": "def party_size_validator(value: int) -> Union[None, serializers.ValidationError]:\n    \"\"\"Check if the party size is within the allowed range.\n    Args:\n        value (int): The number of guests in the booking\n    Returns:\n        None\n    Raises:\n        serializers.ValidationError: If the party size is not between 1 and 25\n    \"\"\"\n    if not 1 <= value <= 25:",
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "price_is_valid",
        "kind": 2,
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "peekOfCode": "def price_is_valid(value: float) -> Union[None, serializers.ValidationError]:\n    \"\"\"Check if the price is a positive number.\n    Args:\n        value (float): The price of the menu item\n    \"\"\"\n    if value <= 0:\n        raise serializers.ValidationError(\"Price must be a positive number.\")\ndef inventory_is_valid(value: int) -> Union[None, serializers.ValidationError]:\n    \"\"\"Check if the inventory is a non-negative number.\n    Args:",
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "inventory_is_valid",
        "kind": 2,
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "peekOfCode": "def inventory_is_valid(value: int) -> Union[None, serializers.ValidationError]:\n    \"\"\"Check if the inventory is a non-negative number.\n    Args:\n        value (int): The inventory quantity of the menu item\n    \"\"\"\n    if value < 0:\n        raise serializers.ValidationError(\"Inventory must be a non-negative number.\")\nclass DateTimeParsingMixin:\n    def parse_datetime_fields(self, data, request):\n        \"\"\"Parses and validates date and time fields from input data.",
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "BookingsViewsetTestCase",
        "kind": 6,
        "importPath": "applications.resturant.tests.test_booking_endponts",
        "description": "applications.resturant.tests.test_booking_endponts",
        "peekOfCode": "class BookingsViewsetTestCase(APITestCase):\n    def setUp(self):\n        self.client = APIClient()\n        self.test_user = User.objects.create_user(\n            username=\"testuser\", password=\"testpassword\"\n        )\n        self.test_token = Token.objects.create(user=self.test_user)\n        self.client.credentials(HTTP_AUTHORIZATION=f\"Token {self.test_token.key}\")\n        self.list_url = reverse(\"bookings-list\")\n        self.valid_booking_data = {",
        "detail": "applications.resturant.tests.test_booking_endponts",
        "documentation": {}
    },
    {
        "label": "MenuViewsetTestCase",
        "kind": 6,
        "importPath": "applications.resturant.tests.test_menu_endpoints",
        "description": "applications.resturant.tests.test_menu_endpoints",
        "peekOfCode": "class MenuViewsetTestCase(APITestCase):\n    def setUp(self):\n        self.client = APIClient()\n        self.test_user = User.objects.create_user(\n            username=\"menu_testuser\", password=\"testpassword\"\n        )\n        self.test_token = Token.objects.create(user=self.test_user)\n        self.menu_list_url = reverse(\"menu-list\")\n        self.menu_create_url = reverse(\"menu-create\")\n        self.client.credentials(HTTP_AUTHORIZATION=f\"Token {self.test_token.key}\")",
        "detail": "applications.resturant.tests.test_menu_endpoints",
        "documentation": {}
    },
    {
        "label": "BookingSerializerRepresentationTest",
        "kind": 6,
        "importPath": "applications.resturant.tests.test_serialiazers",
        "description": "applications.resturant.tests.test_serialiazers",
        "peekOfCode": "class BookingSerializerRepresentationTest(TestCase):\n    def setUp(self):\n        self.client = APIClient()\n        self.test_user = User.objects.create_user(\n            username=\"testuser\", password=\"testpassword\"\n        )\n        self.test_token = Token.objects.create(user=self.test_user)\n        self.client.credentials(HTTP_AUTHORIZATION=f\"Token {self.test_token.key}\")\n        self.booking = Booking.objects.create(\n            name=\"John Doe\", no_of_guests=4, date=datetime.datetime(2024, 5, 10, 18, 30)",
        "detail": "applications.resturant.tests.test_serialiazers",
        "documentation": {}
    },
    {
        "label": "SecureRequestTests",
        "kind": 6,
        "importPath": "applications.resturant.tests.test_ssl",
        "description": "applications.resturant.tests.test_ssl",
        "peekOfCode": "class SecureRequestTests(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n    def test_secure_proxy_ssl_header(self):\n        # Simulate a request with X-Forwarded-Proto set to 'https'\n        request = self.factory.get('/', HTTP_X_FORWARDED_PROTO='https')\n        # Add wsgi.url_scheme manually (RequestFactory doesn't simulate full WSGI)\n        request.META['wsgi.url_scheme'] = 'http'  # Default scheme before proxy\n        # Now call the view\n        response = secure_check_view(request)",
        "detail": "applications.resturant.tests.test_ssl",
        "documentation": {}
    },
    {
        "label": "secure_check_view",
        "kind": 2,
        "importPath": "applications.resturant.tests.test_ssl",
        "description": "applications.resturant.tests.test_ssl",
        "peekOfCode": "def secure_check_view(request):\n    return JsonResponse({\n        'is_secure': request.is_secure(),\n        'X-Forwarded-Proto': request.META.get('HTTP_X_FORWARDED_PROTO'),\n    })\nclass SecureRequestTests(TestCase):\n    def setUp(self):\n        self.factory = RequestFactory()\n    def test_secure_proxy_ssl_header(self):\n        # Simulate a request with X-Forwarded-Proto set to 'https'",
        "detail": "applications.resturant.tests.test_ssl",
        "documentation": {}
    },
    {
        "label": "ResturantConfig",
        "kind": 6,
        "importPath": "applications.resturant.apps",
        "description": "applications.resturant.apps",
        "peekOfCode": "class ResturantConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"applications.resturant\"\n    def ready(self):\n        setup_loguru()",
        "detail": "applications.resturant.apps",
        "documentation": {}
    },
    {
        "label": "Index",
        "kind": 6,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "class Index(CachedResponseMixin, TemplateView):\n    \"\"\"A view for rendering the index template.\n    This view simply renders the 'index.html' template.\n    \"\"\"\n    primary_model = None\n    template_name = \"index.html\"\n# ----- BOOKING VIEWS -----\n@extend_schema(\n    summary=\"List All Current Bookings\",\n    description=\"Retrieve a list of all Little Lemon Bookings in the system. Authentication Token REQUIRED\",",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "BookingListView",
        "kind": 6,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "class BookingListView(CachedResponseMixin, generics.ListAPIView):\n    \"\"\"Provides endpoint for listing all bookings.\"\"\"\n    queryset = Booking.objects.all()\n    serializer_class = BookingSerializer\n    primary_model = Booking\n    filter_backends = [DjangoFilterBackend]\n    search_fields = [\"name\"]\n    filterset_class = BookingFilter\n    ordering_fields = [\"date\", \"no_of_guests\"]\n    permission_classes = [IsAuthenticated]",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "BookingCreateView",
        "kind": 6,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "class BookingCreateView(CachedResponseMixin, generics.CreateAPIView):\n    \"\"\"Provides endpoint for creating bookings.\"\"\"\n    queryset = Booking.objects.all()\n    primary_model = Booking\n    serializer_class = BookingSerializer\n    permission_classes = [IsAuthenticated]\n    def create(self, request, *args, **kwargs):\n        if request.user.is_authenticated:\n            serializer = self.get_serializer(data=request.data)\n            serializer.is_valid(raise_exception=True)",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "BookingView",
        "kind": 6,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "class BookingView(CachedResponseMixin, generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"Provides endpoints for retrieving, updating, and deleting a specific booking.\"\"\"\n    queryset = Booking.objects.all()\n    serializer_class = BookingSerializer\n    lookup_field = \"booking_id\"\n    primary_model = Booking\n    filter_backends = [DjangoFilterBackend]\n    permission_classes = [IsAuthenticated]\n    def get_serializer_context(self):\n        context = super().get_serializer_context()",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "MenuListView",
        "kind": 6,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "class MenuListView(CachedResponseMixin, generics.ListAPIView):\n    \"\"\"Provides endpoint for listing all menu items.\"\"\"\n    queryset = Menu.objects.all()\n    serializer_class = MenuSerializer\n    filter_backends = [DjangoFilterBackend]\n    search_fields = [\"title\"]\n    filterset_class = ProductFilter\n    primary_model = Menu\n    permission_classes = [IsAuthenticated]\n@extend_schema(",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "MenuCreateView",
        "kind": 6,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "class MenuCreateView(CachedResponseMixin, generics.CreateAPIView):\n    \"\"\"Provides endpoint for creating menu items.\"\"\"\n    queryset = Menu.objects.all()\n    serializer_class = MenuSerializer\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        self.perform_create(serializer)\n        headers = self.get_success_headers(serializer.data)",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "MenuView",
        "kind": 6,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "class MenuView(CachedResponseMixin, generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"Provides endpoints for retrieving, updating, and deleting a specific menu item.\"\"\"\n    queryset = Menu.objects.all()\n    serializer_class = MenuSerializer\n    primary_model = Menu\n    lookup_field = \"item_id\"\n    filter_backends = [DjangoFilterBackend]\n    search_fields = [\"title\"]\n    filterset_class = ProductFilter\n    permission_classes = [IsAuthenticated]",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "handler_page_not_found_404",
        "kind": 2,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "def handler_page_not_found_404(request, exception):\n    logger.warning(f\"Page Not Found: {request.path} - Error{exception}\")\n    return render(request, \"404.html\", status=404)\ndef handler_server_error_500(request):\n    logger.error(f\"Server Error: {request.path}\")\n    return render(request, \"500.html\", status=500)\nclass Index(CachedResponseMixin, TemplateView):\n    \"\"\"A view for rendering the index template.\n    This view simply renders the 'index.html' template.\n    \"\"\"",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "handler_server_error_500",
        "kind": 2,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "def handler_server_error_500(request):\n    logger.error(f\"Server Error: {request.path}\")\n    return render(request, \"500.html\", status=500)\nclass Index(CachedResponseMixin, TemplateView):\n    \"\"\"A view for rendering the index template.\n    This view simply renders the 'index.html' template.\n    \"\"\"\n    primary_model = None\n    template_name = \"index.html\"\n# ----- BOOKING VIEWS -----",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "ProductFilter",
        "kind": 6,
        "importPath": "applications.resturant.filters",
        "description": "applications.resturant.filters",
        "peekOfCode": "class ProductFilter(FilterSet):\n    \"\"\"FilterSet for filtering Menu objects.\n    Allows filtering by minimum price, maximum price, title (case-insensitive contains), and minimum inventory.\n    \"\"\"\n    min_price = NumberFilter(field_name=\"price\", lookup_expr=\"gte\")\n    max_price = NumberFilter(field_name=\"price\", lookup_expr=\"lte\")\n    title = CharFilter(field_name=\"title\", lookup_expr=\"icontains\")\n    inventory = NumberFilter(field_name=\"inventory\", lookup_expr=\"gte\")\n    class Meta:\n        model = Menu",
        "detail": "applications.resturant.filters",
        "documentation": {}
    },
    {
        "label": "BookingFilter",
        "kind": 6,
        "importPath": "applications.resturant.filters",
        "description": "applications.resturant.filters",
        "peekOfCode": "class BookingFilter(FilterSet):\n    \"\"\"FilterSet for filtering Booking objects.\n    Allows filtering by date, number of guests, and name (case-insensitive contains).\n    \"\"\"\n    date = DateFilter(field_name=\"date\")\n    time = TimeFilter(field_name=\"time\")\n    min_no_of_guests = NumberFilter(field_name=\"no_of_guests\", lookup_expr=\"gte\")\n    max_no_of_guests = NumberFilter(field_name=\"no_of_guests\", lookup_expr=\"lte\")\n    name = CharFilter(field_name=\"name\", lookup_expr=\"icontains\")\n    class Meta:",
        "detail": "applications.resturant.filters",
        "documentation": {}
    },
    {
        "label": "MenuFilterFormHelper",
        "kind": 6,
        "importPath": "applications.resturant.forms",
        "description": "applications.resturant.forms",
        "peekOfCode": "class MenuFilterFormHelper(forms.Form):\n    \"\"\"Form helper for filtering menu items in the restaurant application.\n    Provides a user-friendly interface for filtering menu items by price, inventory, and product name.\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper(self)\n        self.helper.form_method = \"get\"\n        self.fields[\"min_price\"].label = \"Minimum Price\"\n        self.fields[\"max_price\"].label = \"Maximum Price\"",
        "detail": "applications.resturant.forms",
        "documentation": {}
    },
    {
        "label": "BookingFilterFormHelper",
        "kind": 6,
        "importPath": "applications.resturant.forms",
        "description": "applications.resturant.forms",
        "peekOfCode": "class BookingFilterFormHelper(forms.Form):\n    \"\"\"Form helper for filtering restaurant bookings.\n    Allows users to filter bookings by date, time, party size, and booking party name.\n    \"\"\"\n    date = forms.DateField(\n        required=False,\n        widget=forms.DateInput(attrs={\"type\": \"date\", \"class\": \"form-control\"}),\n    )\n    time = forms.TimeField(\n        required=False,",
        "detail": "applications.resturant.forms",
        "documentation": {}
    },
    {
        "label": "Booking",
        "kind": 6,
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "peekOfCode": "class Booking(Model):\n    booking_id = fields.SmallAutoField(verbose_name=\"Booking ID\", primary_key=True)\n    name = fields.CharField(\n        verbose_name=\"Guest Name\", max_length=255, null=False, blank=False\n    )\n    no_of_guests = fields.PositiveSmallIntegerField(\n        verbose_name=\"Party Size\", blank=False, null=False\n    )\n    date = fields.DateTimeField(verbose_name=\"Date of Booking\")\n    def __str__(self):",
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "kind": 6,
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "peekOfCode": "class Menu(Model):\n    item_id = fields.SmallAutoField(verbose_name=\"Menu Item ID\", primary_key=True)\n    title = fields.CharField(\n        verbose_name=\"Item Title\", max_length=255, null=False, blank=False\n    )\n    price = fields.DecimalField(\n        verbose_name=\"Item Price ($USD)\", max_digits=10, decimal_places=2\n    )\n    inventory = fields.PositiveSmallIntegerField(\n        verbose_name=\"Number in Stock\", blank=False, null=True",
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "applications.resturant.urls",
        "description": "applications.resturant.urls",
        "peekOfCode": "urlpatterns = [\n    # path(\"\", include(router.urls)),\n    path(\"swagger/\", SpectacularSwaggerView.as_view(), name=\"swagger\"),\n    path(\"redoc/\", SpectacularRedocView.as_view(), name=\"redoc\"),\n    path(\"schema\", SpectacularAPIView.as_view(), name=\"schema\"),\n    re_path(r\"^bookings/?$\", endpoints.BookingListView.as_view(), name=\"bookings-list\"),\n    re_path(\n        r\"^bookings/create/?$\",\n        endpoints.BookingCreateView.as_view(),\n        name=\"bookings-create\",",
        "detail": "applications.resturant.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.asgi",
        "description": "config.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "config.asgi",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "class Base(Configuration):\n    SECRET_KEY = environment_var[\"SECRET_KEY\"]\n    STATIC_URL = \"static/\"\n    ROOT_URLCONF = \"config.urls\"\n    # APPEND_SLASH=False\n    WSGI_APPLICATION = \"config.wsgi.application\"\n    LANGUAGE_CODE = \"en-us\"\n    TIME_ZONE = \"UTC\"\n    USE_I18N = True\n    FORM_RENDERER = \"django.forms.renderers.TemplatesSetting\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "Grading",
        "kind": 6,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "class Grading(Base):\n    DEBUG = False\n    ALLOWED_HOSTS = [\n        \"little-lemon.xyz\",\n        \"localhost\",\n        \"203.161.47.138\",\n        \"*\",\n        \"9skx15r9-7575.usw3.devtunnels.ms\",\n    ]\n    CSRF_TRUSTED_ORIGINS = [",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "Development",
        "kind": 6,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "class Development(Base):\n    DEBUG = True\n    ALLOWED_HOSTS = [\"*\"]\n    CSRF_TRUSTED_ORIGINS = (\"https://localhost \", \"http://localhost\")\n    INSTALLED_APPS = [\n        \"django.contrib.admin\",\n        \"django.contrib.auth\",\n        \"django.contrib.contenttypes\",\n        \"django.contrib.sessions\",\n        \"django.contrib.messages\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "get_django_forms_templates_path",
        "kind": 2,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "def get_django_forms_templates_path() -> str | None:\n    \"\"\"Finds the path to the Django forms templates directory in site-packages.\n    This function searches through all known site-packages directories to locate the directory containing Django's form templates.\n    Falls back to searching sys.path for site-packages if not found.\n    Returns:\n        str or None: The path to the forms templates directory if found, otherwise None.\n    \"\"\"\n    # Try all site-packages directories from the site module\n    for site_dir in site.getsitepackages() + [site.getusersitepackages()]:\n        forms_templates = os.path.join(site_dir, \"django\", \"forms\", \"templates\")",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\ndef get_django_forms_templates_path() -> str | None:\n    \"\"\"Finds the path to the Django forms templates directory in site-packages.\n    This function searches through all known site-packages directories to locate the directory containing Django's form templates.\n    Falls back to searching sys.path for site-packages if not found.\n    Returns:\n        str or None: The path to the forms templates directory if found, otherwise None.\n    \"\"\"\n    # Try all site-packages directories from the site module\n    for site_dir in site.getsitepackages() + [site.getusersitepackages()]:",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "django_forms_templates_path",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "django_forms_templates_path = get_django_forms_templates_path()\nclass Base(Configuration):\n    SECRET_KEY = environment_var[\"SECRET_KEY\"]\n    STATIC_URL = \"static/\"\n    ROOT_URLCONF = \"config.urls\"\n    # APPEND_SLASH=False\n    WSGI_APPLICATION = \"config.wsgi.application\"\n    LANGUAGE_CODE = \"en-us\"\n    TIME_ZONE = \"UTC\"\n    USE_I18N = True",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "handler404",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "handler404 = handler_page_not_found_404\nhandler500 = handler_server_error_500\nurlpatterns = [\n    re_path(r\"^$\", Index.as_view(), name=\"index\"),\n    path(\"admin/\", admin.site.urls),\n    path(\"restaurant/\", include(\"applications.resturant.urls\")),\n    path(\"\", include(\"django_prometheus.urls\")),\n    path(\"auth/\", include(\"djoser.urls\")),\n    path(\"auth/\", include(\"djoser.urls.authtoken\")),\n    re_path(r\"^checkup/\", include(\"health_check.urls\")),",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "handler500",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "handler500 = handler_server_error_500\nurlpatterns = [\n    re_path(r\"^$\", Index.as_view(), name=\"index\"),\n    path(\"admin/\", admin.site.urls),\n    path(\"restaurant/\", include(\"applications.resturant.urls\")),\n    path(\"\", include(\"django_prometheus.urls\")),\n    path(\"auth/\", include(\"djoser.urls\")),\n    path(\"auth/\", include(\"djoser.urls.authtoken\")),\n    re_path(r\"^checkup/\", include(\"health_check.urls\")),\n    path(\"byte_patrol/\", include(\"applications.byte_patrol.urls\")),",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "urlpatterns = [\n    re_path(r\"^$\", Index.as_view(), name=\"index\"),\n    path(\"admin/\", admin.site.urls),\n    path(\"restaurant/\", include(\"applications.resturant.urls\")),\n    path(\"\", include(\"django_prometheus.urls\")),\n    path(\"auth/\", include(\"djoser.urls\")),\n    path(\"auth/\", include(\"djoser.urls.authtoken\")),\n    re_path(r\"^checkup/\", include(\"health_check.urls\")),\n    path(\"byte_patrol/\", include(\"applications.byte_patrol.urls\")),\n] + debug_toolbar_urls()",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.wsgi",
        "description": "config.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "config.wsgi",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 5,
        "importPath": "mock.data",
        "description": "mock.data",
        "peekOfCode": "menu = [\n    {\n        \"title\": \"Green Tea Refresher\",\n        \"inventory\": 46,\n        \"price\": \"error: no such column: grocery\",\n    },\n    {\n        \"title\": \"Juice - Lagoon Mango\",\n        \"inventory\": 25,\n        \"price\": \"error: no such column: grocery\",",
        "detail": "mock.data",
        "documentation": {}
    },
    {
        "label": "booking",
        "kind": 5,
        "importPath": "mock.data",
        "description": "mock.data",
        "peekOfCode": "booking = [\n    {\"name\": \"Steffie Grimmer\", \"no_of_guests\": 2, \"date\": \"2016-09-22 23:43:44\"},\n    {\"name\": \"Abbie Butcher\", \"no_of_guests\": 1, \"date\": \"2010-01-12 01:32:44\"},\n    {\"name\": \"Kriste Lawrey\", \"no_of_guests\": 6, \"date\": \"2007-09-26 22:49:01\"},\n    {\"name\": \"Celia Govan\", \"no_of_guests\": 1, \"date\": \"1998-02-20 08:44:24\"},\n    {\"name\": \"Matias Newlove\", \"no_of_guests\": 2, \"date\": \"2009-06-15 11:02:54\"},\n    {\"name\": \"Kipp Plunkett\", \"no_of_guests\": 3, \"date\": \"2006-07-13 12:02:43\"},\n    {\"name\": \"Gideon Wintringham\", \"no_of_guests\": 14, \"date\": \"1997-11-06 09:04:10\"},\n    {\"name\": \"Stearne McLelland\", \"no_of_guests\": 4, \"date\": \"1997-07-05 08:43:36\"},\n    {\"name\": \"D'arcy Wield\", \"no_of_guests\": 13, \"date\": \"1999-01-22 17:07:27\"},",
        "detail": "mock.data",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "run.manage",
        "description": "run.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings\")\n    os.environ.setdefault(\"DJANGO_CONFIGURATION\", \"Grading\")\n    from configurations.management import execute_from_command_line\n    try:\n        execute_from_command_line(sys.argv)\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"",
        "detail": "run.manage",
        "documentation": {}
    },
    {
        "label": "StaticStorage",
        "kind": 6,
        "importPath": "utils.backends",
        "description": "utils.backends",
        "peekOfCode": "class StaticStorage(S3Boto3Storage):\n    location = \"static\"\n    default_acl = \"public-read\"\n    file_overwrite = True",
        "detail": "utils.backends",
        "documentation": {}
    },
    {
        "label": "Metrics",
        "kind": 6,
        "importPath": "utils.cache",
        "description": "utils.cache",
        "peekOfCode": "class Metrics:\n    \"\"\"Manages metrics tracking for the api.\n    This class provides a comprehensive metrics tracking system for monitoring various application events and performance indicators.\n    It uses Prometheus-style counters and histograms to record submission attempts, cache interactions metrics.\n    Attributes:\n        NAMESPACE (str): The base namespace for all metrics in the web application.\n    \"\"\"\n    NAMESPACE = \"dozens\"\n    _instance = None\n    def __new__(cls):",
        "detail": "utils.cache",
        "documentation": {}
    },
    {
        "label": "CachedTemplateView",
        "kind": 6,
        "importPath": "utils.cache",
        "description": "utils.cache",
        "peekOfCode": "class CachedTemplateView(TemplateView):\n    \"\"\"A TemplateView that caches its rendered output.\n    This class method wraps the standard Django TemplateView with caching, improving performance for repeated requests.\n    \"\"\"\n    @classmethod\n    def as_view(cls, **initkwargs):  # @NoSelf\n        return cache_page(VIEW_CACHE_TTL)(\n            super(CachedTemplateView, cls).as_view(**initkwargs)\n        )\nclass NeverCacheMixin(object):",
        "detail": "utils.cache",
        "documentation": {}
    },
    {
        "label": "NeverCacheMixin",
        "kind": 6,
        "importPath": "utils.cache",
        "description": "utils.cache",
        "peekOfCode": "class NeverCacheMixin(object):\n    @method_decorator(never_cache)\n    def dispatch(self, *args, **kwargs):\n        return super(NeverCacheMixin, self).dispatch(*args, **kwargs)\nclass CachedResponseMixin:\n    \"\"\"Mixin class to provide caching functionality for API responses.\n    This mixin allows views to cache their responses based on user identity and query parameters,\n    improving performance by reducing the need for repeated database queries.\n    \"\"\"\n    def get_cache_key(self) -> str:",
        "detail": "utils.cache",
        "documentation": {}
    },
    {
        "label": "CachedResponseMixin",
        "kind": 6,
        "importPath": "utils.cache",
        "description": "utils.cache",
        "peekOfCode": "class CachedResponseMixin:\n    \"\"\"Mixin class to provide caching functionality for API responses.\n    This mixin allows views to cache their responses based on user identity and query parameters,\n    improving performance by reducing the need for repeated database queries.\n    \"\"\"\n    def get_cache_key(self) -> str:\n        \"\"\"Generate a unique cache key based on the request and model information.\n        This method constructs a cache key that incorporates the user ID, query parameters,\n        and model names associated with the view.\n        Returns:",
        "detail": "utils.cache",
        "documentation": {}
    },
    {
        "label": "invalidate_cache",
        "kind": 2,
        "importPath": "utils.cache",
        "description": "utils.cache",
        "peekOfCode": "def invalidate_cache(sender, **kwargs):\n    model_name = sender.__name__\n    logger.debug(f\"Signal Received For {model_name}\")\n    # Pattern to match cache keys that include the model name as namespace\n    cache_key_pattern = f\"{model_name}:*\"\n    logger.debug(f'Searching For Cache Key Pattern\" {cache_key_pattern}')\n    if cache_keys := cache.keys(cache_key_pattern):\n        cache.delete_many(cache_keys)\n        metrics.increment_cache(model=model_name, cache_event_type=\"eviction\")\n        logger.info(f\"Cache invalidated for model: {model_name}\")",
        "detail": "utils.cache",
        "documentation": {}
    },
    {
        "label": "VIEW_CACHE_TTL",
        "kind": 5,
        "importPath": "utils.cache",
        "description": "utils.cache",
        "peekOfCode": "VIEW_CACHE_TTL = int(os.environ[\"VIEW_CACHE_TTL\"])\nclass Metrics:\n    \"\"\"Manages metrics tracking for the api.\n    This class provides a comprehensive metrics tracking system for monitoring various application events and performance indicators.\n    It uses Prometheus-style counters and histograms to record submission attempts, cache interactions metrics.\n    Attributes:\n        NAMESPACE (str): The base namespace for all metrics in the web application.\n    \"\"\"\n    NAMESPACE = \"dozens\"\n    _instance = None",
        "detail": "utils.cache",
        "documentation": {}
    },
    {
        "label": "metrics",
        "kind": 5,
        "importPath": "utils.cache",
        "description": "utils.cache",
        "peekOfCode": "metrics = Metrics()\nclass CachedTemplateView(TemplateView):\n    \"\"\"A TemplateView that caches its rendered output.\n    This class method wraps the standard Django TemplateView with caching, improving performance for repeated requests.\n    \"\"\"\n    @classmethod\n    def as_view(cls, **initkwargs):  # @NoSelf\n        return cache_page(VIEW_CACHE_TTL)(\n            super(CachedTemplateView, cls).as_view(**initkwargs)\n        )",
        "detail": "utils.cache",
        "documentation": {}
    },
    {
        "label": "setup_loguru",
        "kind": 2,
        "importPath": "utils.logging",
        "description": "utils.logging",
        "peekOfCode": "def setup_loguru(log_dir=\"logs\"):\n    \"\"\"Configures the Loguru logger for both console and file output.\n    This function sets up logging to display messages in the console and to write logs to a file in the specified directory.\n    Args:\n        log_dir (str): The directory where log files will be stored. Defaults to \"logs\".\n    Returns:\n        None\n    \"\"\"\n    logger.remove()\n    # Console",
        "detail": "utils.logging",
        "documentation": {}
    }
]