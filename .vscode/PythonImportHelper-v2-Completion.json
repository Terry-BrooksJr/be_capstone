[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "applications.models",
        "description": "applications.models",
        "isExtraImport": true,
        "detail": "applications.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "applications.models",
        "description": "applications.models",
        "isExtraImport": true,
        "detail": "applications.models",
        "documentation": {}
    },
    {
        "label": "bookings",
        "importPath": "mock.data",
        "description": "mock.data",
        "isExtraImport": true,
        "detail": "mock.data",
        "documentation": {}
    },
    {
        "label": "menu",
        "importPath": "mock.data",
        "description": "mock.data",
        "isExtraImport": true,
        "detail": "mock.data",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
<<<<<<< HEAD
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
=======
>>>>>>> 2dec35a (feat: Add 404 error page and enhance index page layout)
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "QueryDict",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "OpenApiTypes",
        "importPath": "drf_spectacular.types",
        "description": "drf_spectacular.types",
        "isExtraImport": true,
        "detail": "drf_spectacular.types",
        "documentation": {}
    },
    {
        "label": "OpenApiTypes",
        "importPath": "drf_spectacular.types",
        "description": "drf_spectacular.types",
        "isExtraImport": true,
        "detail": "drf_spectacular.types",
        "documentation": {}
    },
    {
        "label": "OpenApiExample",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema_field",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema_serializer",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiExample",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiParameter",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
<<<<<<< HEAD
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
=======
>>>>>>> 2dec35a (feat: Add 404 error page and enhance index page layout)
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
<<<<<<< HEAD
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
=======
>>>>>>> 2dec35a (feat: Add 404 error page and enhance index page layout)
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "UniqueTogetherValidator",
        "importPath": "rest_framework.validators",
        "description": "rest_framework.validators",
        "isExtraImport": true,
        "detail": "rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "isExtraImport": true,
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "BookingSerializer",
        "importPath": "resturant.serializers.core",
        "description": "resturant.serializers.core",
        "isExtraImport": true,
        "detail": "resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
<<<<<<< HEAD
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "post_delete",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http.response",
        "description": "django.http.response",
        "isExtraImport": true,
        "detail": "django.http.response",
        "documentation": {}
    },
    {
        "label": "TemplateResponse",
        "importPath": "django.template.response",
        "description": "django.template.response",
        "isExtraImport": true,
        "detail": "django.template.response",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "cache_page",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {}
    },
    {
        "label": "never_cache",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {}
    },
    {
=======
>>>>>>> 2dec35a (feat: Add 404 error page and enhance index page layout)
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "JsonResponseMixin",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "ObtainAuthToken",
        "importPath": "rest_framework.authtoken.views",
        "description": "rest_framework.authtoken.views",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.views",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "BookingFilter",
        "importPath": "applications.resturant.filters",
        "description": "applications.resturant.filters",
        "isExtraImport": true,
        "detail": "applications.resturant.filters",
        "documentation": {}
    },
    {
        "label": "ProductFilter",
        "importPath": "applications.resturant.filters",
        "description": "applications.resturant.filters",
        "isExtraImport": true,
        "detail": "applications.resturant.filters",
        "documentation": {}
    },
    {
        "label": "BookingSerializer",
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "isExtraImport": true,
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "MenuSerializer",
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "isExtraImport": true,
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "CharFilter",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "DateFilter",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "FilterSet",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "NumberFilter",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "TimeFilter",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "BookingFilterFormHelper",
        "importPath": "applications.resturant.forms",
        "description": "applications.resturant.forms",
        "isExtraImport": true,
        "detail": "applications.resturant.forms",
        "documentation": {}
    },
    {
        "label": "MenuFilterFormHelper",
        "importPath": "applications.resturant.forms",
        "description": "applications.resturant.forms",
        "isExtraImport": true,
        "detail": "applications.resturant.forms",
        "documentation": {}
    },
    {
        "label": "FormHelper",
        "importPath": "crispy_forms.helper",
        "description": "crispy_forms.helper",
        "isExtraImport": true,
        "detail": "crispy_forms.helper",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Layout",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Row",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "Submit",
        "importPath": "crispy_forms.layout",
        "description": "crispy_forms.layout",
        "isExtraImport": true,
        "detail": "crispy_forms.layout",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "Index",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "SpectacularAPIView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularRedocView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularSwaggerView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "endpoints",
        "importPath": "resturant",
        "description": "resturant",
        "isExtraImport": true,
        "detail": "resturant",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "environ",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Configuration",
        "importPath": "configurations",
        "description": "configurations",
        "isExtraImport": true,
        "detail": "configurations",
        "documentation": {}
    },
    {
        "label": "debug_toolbar_urls",
        "importPath": "debug_toolbar.toolbar",
        "description": "debug_toolbar.toolbar",
        "isExtraImport": true,
        "detail": "debug_toolbar.toolbar",
        "documentation": {}
    },
    {
        "label": "Index",
        "importPath": "resturant.endpoints",
        "description": "resturant.endpoints",
        "isExtraImport": true,
        "detail": "resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "handler_page_not_found_404",
        "importPath": "resturant.endpoints",
        "description": "resturant.endpoints",
        "isExtraImport": true,
        "detail": "resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "configurations.wsgi",
        "description": "configurations.wsgi",
        "isExtraImport": true,
        "detail": "configurations.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "applications.resturant.management.commands.seed",
        "description": "applications.resturant.management.commands.seed",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Seeds the database with sample data\"\n    requires_migrations_checks = True\n    output_transaction = True\n    def handle(self, *args, **options):\n        if options[\"no-bookings\"]:\n            seed_menu\n        elif options[\"no-menu\"]:\n            seed_bookings()\n        else:",
        "detail": "applications.resturant.management.commands.seed",
        "documentation": {}
    },
    {
        "label": "seed_bookings",
        "kind": 2,
        "importPath": "applications.resturant.management.commands.seed",
        "description": "applications.resturant.management.commands.seed",
        "peekOfCode": "def seed_bookings():\n    \"\"\"Seeds the Booking table with sample data.\"\"\"\n    booking_objects = []\n    for booking in bookings:\n        json.loads(booking)\n        booking_objects.append(\n            Booking(\n                name=booking.name,\n                no_of_guests=booking.no_of_guests,\n                booking_date=booking.booking_date,",
        "detail": "applications.resturant.management.commands.seed",
        "documentation": {}
    },
    {
        "label": "seed_menu",
        "kind": 2,
        "importPath": "applications.resturant.management.commands.seed",
        "description": "applications.resturant.management.commands.seed",
        "peekOfCode": "def seed_menu():\n    \"\"\"Seeds the Menu table with sample data.\"\"\"\n    menu_items_objects = []\n    for item in menu:\n        json.loads(item)\n        menu_items_objects.append(\n            Menu(title=item.title, price=item.price, inventory=item.inventory)\n        )\n    Menu.objects.bulk_create(menu_items_objects)\n    print(\"Menu seeded successfully!\")",
        "detail": "applications.resturant.management.commands.seed",
        "documentation": {}
    },
    {
        "label": "seed_all",
        "kind": 2,
        "importPath": "applications.resturant.management.commands.seed",
        "description": "applications.resturant.management.commands.seed",
        "peekOfCode": "def seed_all():\n    \"\"\"Seeds all tables with sample data.\"\"\"\n    if seed_bookings() and seed_menu():\n        print(\"All data seeded successfully!\")\n        return True\n    else:\n        print(\"Failed to seed data!\")\n        return False\nclass Command(BaseCommand):\n    help = \"Seeds the database with sample data\"",
        "detail": "applications.resturant.management.commands.seed",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.resturant.migrations.0001_initial",
        "description": "applications.resturant.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"Booking\",\n            fields=[\n                (\n                    \"booking_id\",\n                    models.SmallAutoField(",
        "detail": "applications.resturant.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.resturant.migrations.0002_alter_booking_date",
        "description": "applications.resturant.migrations.0002_alter_booking_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"resturant\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"booking\",\n            name=\"date\",\n            field=models.DateTimeField(verbose_name=\"Date of Booking\"),\n        ),",
        "detail": "applications.resturant.migrations.0002_alter_booking_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "applications.resturant.migrations.0003_booking_idx_name_menu_idx_title_and_more",
        "description": "applications.resturant.migrations.0003_booking_idx_name_menu_idx_title_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"resturant\", \"0002_alter_booking_date\"),\n    ]\n    operations = [\n        migrations.AddIndex(\n            model_name=\"booking\",\n            index=models.Index(fields=[\"name\"], name=\"idx_name\"),\n        ),\n        migrations.AddIndex(",
        "detail": "applications.resturant.migrations.0003_booking_idx_name_menu_idx_title_and_more",
        "documentation": {}
    },
    {
        "label": "DateTimeParsingMixin",
        "kind": 6,
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "peekOfCode": "class DateTimeParsingMixin:\n    def parse_datetime_fields(self, data, request):\n        \"\"\"Parses and validates date and time fields from input data.\n        Ensures date and time are present, valid, and in the future, then combines them into a datetime object.\n        Args:\n            data: The input data containing date and time fields.\n            request: The HTTP request object.\n        Returns:\n            dict: The updated data with a combined datetime object in the 'date' field.\n        Raises:",
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "MenuSerializer",
        "kind": 6,
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "peekOfCode": "class MenuSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for Menu objects.\n    Serializes and deserializes menu item data.\n    \"\"\"\n    item_id = serializers.IntegerField(\n        read_only=True, help_text=\"Unique identifier for the menu item\"\n    )\n    title = serializers.CharField(max_length=255, help_text=\"Name of the menu item\")\n    price = serializers.DecimalField(\n        max_digits=6, decimal_places=2, help_text=\"Price of the menu item in USD\"",
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "BookingSerializer",
        "kind": 6,
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "peekOfCode": "class BookingSerializer(DateTimeParsingMixin, serializers.ModelSerializer):\n    \"\"\"Serializer for Booking objects.\"\"\"\n    booking_id = serializers.IntegerField(\n        read_only=True, help_text=\"Unique identifier for the booking\"\n    )\n    name = serializers.CharField(\n        label=\"Reservation Name\",\n        max_length=255,\n        min_length=5,\n        allow_null=False,",
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "validate_date_in_future",
        "kind": 2,
        "importPath": "applications.resturant.serializers.core",
        "description": "applications.resturant.serializers.core",
        "peekOfCode": "def validate_date_in_future(value):\n    \"\"\"Check if the booking date is in the future.\n    Args:\n        booking_date (datetime): The date of the booking\n    Returns:\n        bool: True if the booking date is in the future, False otherwise\n    \"\"\"\n    if not value > TIMEZONE_AWARE_NOW:\n        raise serializers.ValidationError(\"Booking date must be in the future.\")\nclass DateTimeParsingMixin:",
        "detail": "applications.resturant.serializers.core",
        "documentation": {}
    },
    {
        "label": "BookingsViewsetTestCase",
        "kind": 6,
        "importPath": "applications.resturant.tests.test_booking_endponts",
        "description": "applications.resturant.tests.test_booking_endponts",
        "peekOfCode": "class BookingsViewsetTestCase(APITestCase):\n    def setUp(self):\n        self.client = APIClient()\n        self.test_user = User.objects.create_user(\n            username=\"testuser\", password=\"testpassword\"\n        )\n        self.test_token = Token.objects.create(user=self.test_user)\n        self.client.credentials(HTTP_AUTHORIZATION=f\"Token {self.test_token.key}\")\n        self.list_url = reverse(\"bookings-list\")\n        self.valid_booking_data = {",
        "detail": "applications.resturant.tests.test_booking_endponts",
        "documentation": {}
    },
    {
        "label": "MenuViewsetTestCase",
        "kind": 6,
        "importPath": "applications.resturant.tests.test_menu_endpoints",
        "description": "applications.resturant.tests.test_menu_endpoints",
        "peekOfCode": "class MenuViewsetTestCase(APITestCase):\n    def setUp(self):\n        self.client = APIClient()\n        self.test_user = User.objects.create_user(\n            username=\"menu_testuser\", password=\"testpassword\"\n        )\n        self.test_token = Token.objects.create(user=self.test_user)\n        self.menu_list_url = reverse(\"menu-list\")\n        self.menu_create_url = reverse(\"menu-create\")\n        self.client.credentials(HTTP_AUTHORIZATION=f\"Token {self.test_token.key}\")",
        "detail": "applications.resturant.tests.test_menu_endpoints",
        "documentation": {}
    },
    {
        "label": "BookingSerializerRepresentationTest",
        "kind": 6,
        "importPath": "applications.resturant.tests.test_serialiazers",
        "description": "applications.resturant.tests.test_serialiazers",
        "peekOfCode": "class BookingSerializerRepresentationTest(TestCase):\n    def setUp(self):\n        self.client = APIClient()\n        self.test_user = User.objects.create_user(\n            username=\"testuser\", password=\"testpassword\"\n        )\n        self.test_token = Token.objects.create(user=self.test_user)\n        self.client.credentials(HTTP_AUTHORIZATION=f\"Token {self.test_token.key}\")\n        self.booking = Booking.objects.create(\n            name=\"John Doe\", no_of_guests=4, date=datetime.datetime(2024, 5, 10, 18, 30)",
        "detail": "applications.resturant.tests.test_serialiazers",
        "documentation": {}
    },
    {
        "label": "ResturantConfig",
        "kind": 6,
        "importPath": "applications.resturant.apps",
        "description": "applications.resturant.apps",
        "peekOfCode": "class ResturantConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"applications.resturant\"\n    def ready(self):\n        pass",
        "detail": "applications.resturant.apps",
        "documentation": {}
    },
    {
        "label": "DozensMetrics",
        "kind": 6,
        "importPath": "applications.resturant.cache",
        "description": "applications.resturant.cache",
        "peekOfCode": "class DozensMetrics:\n    \"\"\"Manages metrics tracking for the NHHC web application.\n    This class provides a comprehensive metrics tracking system for monitoring various application events and performance indicators.\n    It uses Prometheus-style counters and histograms to record submission attempts, cache interactions, and document processing metrics.\n    Attributes:\n        NAMESPACE (str): The base namespace for all metrics in the web application.\n    \"\"\"\n    NAMESPACE = \"dozens\"\n    def __init__(self):\n        self.cached_queryset_hit = Counter(",
        "detail": "applications.resturant.cache",
        "documentation": {}
    },
    {
        "label": "CachedTemplateView",
        "kind": 6,
        "importPath": "applications.resturant.cache",
        "description": "applications.resturant.cache",
        "peekOfCode": "class CachedTemplateView(TemplateView):\n    @classmethod\n    def as_view(cls, **initkwargs):  # @NoSelf\n        return cache_page(settings.CACHE_TTL)(\n            super(CachedTemplateView, cls).as_view(**initkwargs)\n        )\nclass NeverCacheMixin(object):\n    @method_decorator(never_cache)\n    def dispatch(self, *args, **kwargs):\n        return super(NeverCacheMixin, self).dispatch(*args, **kwargs)",
        "detail": "applications.resturant.cache",
        "documentation": {}
    },
    {
        "label": "NeverCacheMixin",
        "kind": 6,
        "importPath": "applications.resturant.cache",
        "description": "applications.resturant.cache",
        "peekOfCode": "class NeverCacheMixin(object):\n    @method_decorator(never_cache)\n    def dispatch(self, *args, **kwargs):\n        return super(NeverCacheMixin, self).dispatch(*args, **kwargs)\nclass CachedResponseMixin:\n    \"\"\"Mixin class to provide caching functionality for API responses.\n    This mixin allows views to cache their responses based on user identity and query parameters,\n    improving performance by reducing the need for repeated database queries.\n    \"\"\"\n    def get_cache_key(self) -> str:",
        "detail": "applications.resturant.cache",
        "documentation": {}
    },
    {
        "label": "CachedResponseMixin",
        "kind": 6,
        "importPath": "applications.resturant.cache",
        "description": "applications.resturant.cache",
        "peekOfCode": "class CachedResponseMixin:\n    \"\"\"Mixin class to provide caching functionality for API responses.\n    This mixin allows views to cache their responses based on user identity and query parameters,\n    improving performance by reducing the need for repeated database queries.\n    \"\"\"\n    def get_cache_key(self) -> str:\n        \"\"\"Generate a unique cache key based on the request and model information.\n        This method constructs a cache key that incorporates the user ID, query parameters,\n        and model names associated with the view.\n        Returns:",
        "detail": "applications.resturant.cache",
        "documentation": {}
    },
    {
        "label": "invalidate_cache",
        "kind": 2,
        "importPath": "applications.resturant.cache",
        "description": "applications.resturant.cache",
        "peekOfCode": "def invalidate_cache(sender, **kwargs):\n    model_name = sender.__name__\n    logger.debug(f\"Signal Received For {model_name}\")\n    # Pattern to match cache keys that include the model name as namespace\n    cache_key_pattern = f\"{model_name}:*\"\n    logger.debug(f'Searching For Cache Key Pattern\" {cache_key_pattern}')\n    if cache_keys := cache.keys(cache_key_pattern):\n        cache.delete_many(cache_keys)\n        metrics.increment_cache(model=model_name, type=\"eviction\")\n        logger.info(f\"Cache invalidated for model: {model_name}\")",
        "detail": "applications.resturant.cache",
        "documentation": {}
    },
    {
        "label": "metrics",
        "kind": 5,
        "importPath": "applications.resturant.cache",
        "description": "applications.resturant.cache",
        "peekOfCode": "metrics = DozensMetrics()\nclass CachedTemplateView(TemplateView):\n    @classmethod\n    def as_view(cls, **initkwargs):  # @NoSelf\n        return cache_page(settings.CACHE_TTL)(\n            super(CachedTemplateView, cls).as_view(**initkwargs)\n        )\nclass NeverCacheMixin(object):\n    @method_decorator(never_cache)\n    def dispatch(self, *args, **kwargs):",
        "detail": "applications.resturant.cache",
        "documentation": {}
    },
    {
        "label": "Index",
        "kind": 6,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "class Index(TemplateView):\n    \"\"\"A view for rendering the index template.\n    This view simply renders the 'index.html' template.\n    \"\"\"\n    template_name = \"index.html\"\ndef handler_page_not_found_404(request, exception):\n    return render(request, '404.html', status=404)\n# ----- BOOKING VIEWS -----\n@extend_schema(\n    summary=\"List All Current Bookings\",",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "BookingListView",
        "kind": 6,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "class BookingListView(generics.ListAPIView):\n    \"\"\"Provides endpoint for listing all bookings.\"\"\"\n    queryset = Booking.objects.all()\n    serializer_class = BookingSerializer\n    filter_backends = [DjangoFilterBackend]\n    search_fields = [\"name\"]\n    filterset_class = BookingFilter\n    ordering_fields = [\"date\", \"no_of_guests\"]\n    permission_classes = [IsAuthenticated]\n@extend_schema(",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "BookingCreateView",
        "kind": 6,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "class BookingCreateView(generics.CreateAPIView):\n    \"\"\"Provides endpoint for creating bookings.\"\"\"\n    queryset = Booking.objects.all()\n    serializer_class = BookingSerializer\n    permission_classes = [IsAuthenticated]\n    @extend_schema(\n        summary=\"Create a Booking\",\n        description=\"Create a new booking entry. All fields are required in the request payload. Authentication Token REQUIRED.\",\n        request=BookingSerializer,\n        tags=[\"Reservations\"],",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "BookingView",
        "kind": 6,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "class BookingView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"Provides endpoints for retrieving, updating, and deleting a specific booking.\"\"\"\n    queryset = Booking.objects.all()\n    serializer_class = BookingSerializer\n    lookup_field = \"booking_id\"\n    primary_model = Booking\n    filter_backends = [DjangoFilterBackend]\n    permission_classes = [IsAuthenticated]\n    def get_serializer_context(self):\n        context = super().get_serializer_context()",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "MenuListView",
        "kind": 6,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "class MenuListView(generics.ListAPIView):\n    \"\"\"Provides endpoint for listing all menu items.\"\"\"\n    queryset = Menu.objects.all()\n    serializer_class = MenuSerializer\n    filter_backends = [DjangoFilterBackend]\n    search_fields = [\"title\"]\n    filterset_class = ProductFilter\n    permission_classes = [IsAuthenticated]\n@extend_schema(\n    summary=\"Create a Menu Item\",",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "MenuCreateView",
        "kind": 6,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "class MenuCreateView(generics.CreateAPIView):\n    \"\"\"Provides endpoint for creating menu items.\"\"\"\n    queryset = Menu.objects.all()\n    serializer_class = MenuSerializer\n    permission_classes = [IsAuthenticated]\n# Combined view that supports multiple operations on a single endpoint\nclass MenuView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"Provides endpoints for retrieving, updating, and deleting a specific menu item.\"\"\"\n    queryset = Menu.objects.all()\n    serializer_class = MenuSerializer",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "MenuView",
        "kind": 6,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "class MenuView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"Provides endpoints for retrieving, updating, and deleting a specific menu item.\"\"\"\n    queryset = Menu.objects.all()\n    serializer_class = MenuSerializer\n    primary_model = Menu\n    lookup_field = \"item_id\"\n    filter_backends = [DjangoFilterBackend]\n    search_fields = [\"title\"]\n    filterset_class = ProductFilter\n    permission_classes = [IsAuthenticated]",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "handler_page_not_found_404",
        "kind": 2,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "def handler_page_not_found_404(request, exception):\n    return render(request, '404.html', status=404)\n# ----- BOOKING VIEWS -----\n@extend_schema(\n    summary=\"List All Current Bookings\",\n    description=\"Retrieve a list of all Little Lemon Bookings in the system. Authentication Token REQUIRED\",\n    parameters=None,\n    tags=[\"Reservations\"],\n    # auth=[\"authToken\"],\n    filters=True,",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "handler_page_not_found_404",
        "kind": 2,
        "importPath": "applications.resturant.endpoints",
        "description": "applications.resturant.endpoints",
        "peekOfCode": "def handler_page_not_found_404(request, exception):\n    return render(request, '404.html', status=404)\n# ----- BOOKING VIEWS -----\n@extend_schema(\n    summary=\"List All Current Bookings\",\n    description=\"Retrieve a list of all Little Lemon Bookings in the system. Authentication Token REQUIRED\",\n    parameters=None,\n    tags=[\"Reservations\"],\n    # auth=[\"authToken\"],\n    filters=True,",
        "detail": "applications.resturant.endpoints",
        "documentation": {}
    },
    {
        "label": "ProductFilter",
        "kind": 6,
        "importPath": "applications.resturant.filters",
        "description": "applications.resturant.filters",
        "peekOfCode": "class ProductFilter(FilterSet):\n    \"\"\"FilterSet for filtering Menu objects.\n    Allows filtering by minimum price, maximum price, title (case-insensitive contains), and minimum inventory.\n    \"\"\"\n    min_price = NumberFilter(field_name=\"price\", lookup_expr=\"gte\")\n    max_price = NumberFilter(field_name=\"price\", lookup_expr=\"lte\")\n    title = CharFilter(field_name=\"title\", lookup_expr=\"icontains\")\n    inventory = NumberFilter(field_name=\"inventory\", lookup_expr=\"gte\")\n    class Meta:\n        model = Menu",
        "detail": "applications.resturant.filters",
        "documentation": {}
    },
    {
        "label": "BookingFilter",
        "kind": 6,
        "importPath": "applications.resturant.filters",
        "description": "applications.resturant.filters",
        "peekOfCode": "class BookingFilter(FilterSet):\n    \"\"\"FilterSet for filtering Booking objects.\n    Allows filtering by date, number of guests, and name (case-insensitive contains).\n    \"\"\"\n    date = DateFilter(field_name=\"date\")\n    time = TimeFilter(field_name=\"time\")\n    min_no_of_guests = NumberFilter(field_name=\"no_of_guests\", lookup_expr=\"gte\")\n    max_no_of_guests = NumberFilter(field_name=\"no_of_guests\", lookup_expr=\"lte\")\n    name = CharFilter(field_name=\"name\", lookup_expr=\"icontains\")\n    class Meta:",
        "detail": "applications.resturant.filters",
        "documentation": {}
    },
    {
        "label": "MenuFilterFormHelper",
        "kind": 6,
        "importPath": "applications.resturant.forms",
        "description": "applications.resturant.forms",
        "peekOfCode": "class MenuFilterFormHelper(forms.Form):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.helper = FormHelper(self)\n        self.helper.form_method = \"get\"\n        self.fields[\"min_price\"].label = \"Minimum Price\"\n        self.fields[\"max_price\"].label = \"Maximum Price\"\n        self.fields[\"inventory\"].label = \"Inventory\"\n        self.fields[\"title\"].label = \"Product Name\"\n        self.helper.layout = Layout(",
        "detail": "applications.resturant.forms",
        "documentation": {}
    },
    {
        "label": "BookingFilterFormHelper",
        "kind": 6,
        "importPath": "applications.resturant.forms",
        "description": "applications.resturant.forms",
        "peekOfCode": "class BookingFilterFormHelper(forms.Form):\n    date = forms.DateField(\n        required=False,\n        widget=forms.DateInput(attrs={\"type\": \"date\", \"class\": \"form-control\"}),\n    )\n    time = forms.TimeField(\n        required=False,\n        widget=forms.TimeInput(attrs={\"type\": \"time\", \"class\": \"form-control\"}),\n    )\n    def __init__(self, *args, **kwargs):",
        "detail": "applications.resturant.forms",
        "documentation": {}
    },
    {
        "label": "Booking",
        "kind": 6,
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "peekOfCode": "class Booking(Model):\n    booking_id = fields.SmallAutoField(verbose_name=\"Booking ID\", primary_key=True)\n    name = fields.CharField(\n        verbose_name=\"Guest Name\", max_length=255, null=False, blank=False\n    )\n    no_of_guests = fields.PositiveSmallIntegerField(\n        verbose_name=\"Party Size\", blank=False, null=False\n    )\n    date = fields.DateTimeField(verbose_name=\"Date of Booking\")\n    def __str__(self):",
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "Menu",
        "kind": 6,
        "importPath": "applications.resturant.models",
        "description": "applications.resturant.models",
        "peekOfCode": "class Menu(Model):\n    item_id = fields.SmallAutoField(verbose_name=\"Menu Item ID\", primary_key=True)\n    title = fields.CharField(\n        verbose_name=\"Item Title\", max_length=255, null=False, blank=False\n    )\n    price = fields.DecimalField(\n        verbose_name=\"Item Price ($USD)\", max_digits=10, decimal_places=2\n    )\n    inventory = fields.PositiveSmallIntegerField(\n        verbose_name=\"Number in Stock\", blank=False, null=True",
        "detail": "applications.resturant.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "applications.resturant.urls",
        "description": "applications.resturant.urls",
        "peekOfCode": "urlpatterns = [\n    # path(\"\", include(router.urls)),\n    path(\"swagger/\", SpectacularSwaggerView.as_view(), name=\"swagger\"),\n    path(\"redoc/\", SpectacularRedocView.as_view(), name=\"redoc\"),\n    path(\"schema\", SpectacularAPIView.as_view(), name=\"schema\"),\n    re_path(r\"^bookings/?$\", endpoints.BookingListView.as_view(), name=\"bookings-list\"),\n    re_path(\n        r\"^bookings/create/?$\",\n        endpoints.BookingCreateView.as_view(),\n        name=\"bookings-create\",",
        "detail": "applications.resturant.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.asgi",
        "description": "config.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "config.asgi",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "class Base(Configuration):\n    SECRET_KEY = enviornment_var[\"SECRET_KEY\"]\n    STATIC_URL = \"static/\"\n    ROOT_URLCONF = \"config.urls\"\n    # APPEND_SLASH=False\n    WSGI_APPLICATION = \"config.wsgi.application\"\n    LANGUAGE_CODE = \"en-us\"\n    TIME_ZONE = \"UTC\"\n    USE_I18N = True\n    FORM_RENDERER = \"django.forms.renderers.TemplatesSetting\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "Grading",
        "kind": 6,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "class Grading(Base):\n    DEBUG = False\n    ALLOWED_HOSTS = [\"little-lemon.xyz\"]\n    CSRF_TRUSTED_ORIGINST = (\n        [\"https://localhost\", \"http://localhost\", \"https://little-lemon.xyz\"],\n    )\n    INSTALLED_APPS = [\n        \"django.contrib.admin\",\n        \"django.contrib.auth\",\n        \"django.contrib.contenttypes\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "Development",
        "kind": 6,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "class Development(Base):\n    DEBUG = True\n    ALLOWED_HOSTS = [\"*\"]\n    CSRF_TRUSTED_ORIGINST = ([\"https://localhost \", \"http://localhost\"],)\n    INSTALLED_APPS = [\n        \"django.contrib.admin\",\n        \"django.contrib.auth\",\n        \"django.contrib.contenttypes\",\n        \"django.contrib.sessions\",\n        \"django.contrib.messages\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nclass Base(Configuration):\n    SECRET_KEY = enviornment_var[\"SECRET_KEY\"]\n    STATIC_URL = \"static/\"\n    ROOT_URLCONF = \"config.urls\"\n    # APPEND_SLASH=False\n    WSGI_APPLICATION = \"config.wsgi.application\"\n    LANGUAGE_CODE = \"en-us\"\n    TIME_ZONE = \"UTC\"\n    USE_I18N = True",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "handler404",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "handler404 = handler_page_not_found_404\nurlpatterns = [\n    re_path(r\"^$\", Index.as_view(), name=\"index\"),\n    path(\"admin/\", admin.site.urls),\n    path(\"restaurant/\", include(\"resturant.urls\")),\n    path(\"\", include(\"django_prometheus.urls\")),\n    path(\"auth/\", include(\"djoser.urls\")),\n    path(\"auth/\", include(\"djoser.urls.authtoken\")),\n] + debug_toolbar_urls()",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "urlpatterns = [\n    re_path(r\"^$\", Index.as_view(), name=\"index\"),\n    path(\"admin/\", admin.site.urls),\n    path(\"restaurant/\", include(\"resturant.urls\")),\n    path(\"\", include(\"django_prometheus.urls\")),\n    path(\"auth/\", include(\"djoser.urls\")),\n    path(\"auth/\", include(\"djoser.urls.authtoken\")),\n] + debug_toolbar_urls()",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.wsgi",
        "description": "config.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "config.wsgi",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 5,
        "importPath": "mock.data",
        "description": "mock.data",
        "peekOfCode": "menu = [\n    {\n        \"title\": \"Green Tea Refresher\",\n        \"inventory\": 46,\n        \"price\": \"error: no such column: grocery\",\n    },\n    {\n        \"title\": \"Juice - Lagoon Mango\",\n        \"inventory\": 25,\n        \"price\": \"error: no such column: grocery\",",
        "detail": "mock.data",
        "documentation": {}
    },
    {
        "label": "booking",
        "kind": 5,
        "importPath": "mock.data",
        "description": "mock.data",
        "peekOfCode": "booking = [\n    {\"name\": \"Steffie Grimmer\", \"no_of_guests\": 2, \"date\": \"2016-09-22 23:43:44\"},\n    {\"name\": \"Abbie Butcher\", \"no_of_guests\": 1, \"date\": \"2010-01-12 01:32:44\"},\n    {\"name\": \"Kriste Lawrey\", \"no_of_guests\": 6, \"date\": \"2007-09-26 22:49:01\"},\n    {\"name\": \"Celia Govan\", \"no_of_guests\": 1, \"date\": \"1998-02-20 08:44:24\"},\n    {\"name\": \"Matias Newlove\", \"no_of_guests\": 2, \"date\": \"2009-06-15 11:02:54\"},\n    {\"name\": \"Kipp Plunkett\", \"no_of_guests\": 3, \"date\": \"2006-07-13 12:02:43\"},\n    {\"name\": \"Gideon Wintringham\", \"no_of_guests\": 14, \"date\": \"1997-11-06 09:04:10\"},\n    {\"name\": \"Stearne McLelland\", \"no_of_guests\": 4, \"date\": \"1997-07-05 08:43:36\"},\n    {\"name\": \"D'arcy Wield\", \"no_of_guests\": 13, \"date\": \"1999-01-22 17:07:27\"},",
        "detail": "mock.data",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "run.manage",
        "description": "run.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"config.settings\")\n    os.environ.setdefault(\"DJANGO_CONFIGURATION\", \"Grading\")\n    from configurations.management import execute_from_command_line\n    try:\n        execute_from_command_line(sys.argv)\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"",
        "detail": "run.manage",
        "documentation": {}
    }
]