version: '3'

env:
  vars:
    - DJANGO_CONFIGURATION: Development
silent: true
tasks:
  default:
    cmds:
      - task -l
    silent: true

  venv:
    desc: Make a new virtual environment
    cmds:
      - python3 -m venv .venv --prompt="ACTIVE_VENV_DJANGO_CAPSTONE"
      - source {{.TASKFILE_DIR}}/.venv/bin/activate
    internal: true
  
  develop:
    desc: Starts the Django Application, and background workers in a debug state
    dir: "{{ .TASKFILE_DIR }}"
    cmds:
      - echo "Completing Pre-Start Environment Check For Development..."
      - export DJANGO_CONFIGURATION=Development && export DJANGO_SETTINGS_MODULE=config.settings && doppler run  -- python3 run/manage.py runserver 
    interactive: false
    silent: false


  install:
    deps: [venv]
    cmds:
      - pip install poetry
      - poetry lock
      - poetry install --no-root
    silent: false

  freeze:
    desc: Pin current dependencies
    cmds:
      - doppler run  -- poetry sync
      - doppler run  -- poetry export --without dev,test --without-hashes --without-urls > ./requirements/base.txt
      - doppler run  -- poetry export  --without-hashes --without-urls > ./requirements/dev.txt
    generates:
      - ./requirements/dev.txt
      - ./requirements/base.txt
      - ./poetry.lock
    sources:
      - ./poetry.lock
      - ./requirements/dev.txt
      - ./requirements/base.txt
    silent: false

  db_sync:
    desc: Make and run migrations
    dir: "{{ .TASKFILE_DIR }}"
    cmds:
      - doppler run --  python run/manage.py makemigrations
      - doppler run --  python run/manage.py migrate
    generates:
      - ./application/migrations/*.py
    sources:
      - .application/migrations/*.py
    requires:
      vars:
        - DOPPLER_TOKEN
        - PATH_TO_DB_ROOT_CERT

  collect:
    dir: "{{ .TASKFILE_DIR }}"

    desc: Collect static files in to single directory for production
    cmds:
      - doppler run --  python run/manage.py collectstatic --no-input

  test:
    dir: "{{ .TASKFILE_DIR }}"
    desc: Run tests
    cmds:
      - doppler run --  python run/manage.py test applications.API
    requires:
      vars:
        - DOPPLER_TOKEN
        - PATH_TO_DB_ROOT_CERT

  run:
    desc: Starts a Gunicorn Based Development Server that Reloads on Changes
    dir: "{{ .TASKFILE_DIR }}"

    cmds:
      - doppler run -- python run/manage.py runserver #--workers=2 --threads=2 core.wsgi:application -b :{{or .CLI_ARGS 8000}}



  start:
    dir: "{{ .TASKFILE_DIR }}"

    desc: Command to Start Production Level Services including Install requirements, apply migrations, then start development server
    cmds:
      - echo 'Starting Production Level Services...'
      - echo 'Installing dependencies'
      - task: install

      - echo 'Applying migrations...'
      - task: db_sync

      - echo 'Starting server...'
      - doppler run -- python -m gunicorn --workers=2 --threads=2 core.wsgi:application --bind 0.0.0.0:{{or .CLI_ARGS 8080}} --reload --sync

  schema-check:
    dir: "{{ .TASKFILE_DIR }}"

    desc: Check Models and Serializers for schema compliance with OpenAPI .0 Standards and fail on warnings
    cmds:
      - doppler run --  python run/manage.py spectacular  --file schema/schema$(date +"%Y-%m-%d").yaml --validate
    internal: true

  schema:
    deps: [schema-check]
    dir: "{{ .TASKFILE_DIR }}"

    desc: Generate OpenAPI 3.0 schema.yaml file from models and serializers
    cmds:
      - doppler run --  python run/manage.py spectacular --file schema/schema$(date +"%Y-%m-%d_%H:%M:%S").yaml

  build-image:
    desc: Build Docker Image
    dir: "{{ .TASKFILE_DIR }}/.deploy"
    cmds:
      - docker build buildx --platform --push linux/amd64,linux/arm64  --env DOPPLER_TOKEN=$DOPPLER_TOKEN -t capstone:latest .

  lint:
    desc: Run linters
    dir: "{{ .TASKFILE_DIR }}"
    cmds:
      - python -m black .
      - python -m isort --profile black .
      - python -m autoflake --remove-all-unused-imports --recursive --remove-unused-variables --in-place .
