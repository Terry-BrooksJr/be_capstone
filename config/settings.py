"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.7.

"""

from os import environ as enviornment_var
from pathlib import Path

from configurations import Configuration

BASE_DIR = Path(__file__).resolve().parent.parent


class Base(Configuration):
    SECRET_KEY = enviornment_var["SECRET_KEY"]
    STATIC_URL = "static/"
    ROOT_URLCONF = "config.urls"
    # APPEND_SLASH=False
    WSGI_APPLICATION = "config.wsgi.application"
    LANGUAGE_CODE = "en-us"
    TIME_ZONE = "UTC"
    USE_I18N = True
    FORM_RENDERER = "django.forms.renderers.TemplatesSetting"
    USE_TZ = False
    INTERNAL_IPS = [
    "127.0.0.1",
]

    TEMPLATES = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [
                f"{BASE_DIR}/templates",
                "/Users/terry-brooks./Github/be_capstone-1/.venv/lib/python3.13/site-packages/django/forms/templates",
            ],
            "APP_DIRS": True,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.debug",
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                ],
            },
        },
    ]
    CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
    CRISPY_TEMPLATE_PACK = "bootstrap5"
    AUTH_PASSWORD_VALIDATORS = [
        {
            "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
        },
    ]
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": enviornment_var["DATABASE_NAME"],
            "USER": enviornment_var["DATABASE_USER"],
            "PASSWORD": enviornment_var["DATABASE_PASSWORD"],
            "HOST": enviornment_var["DATABASE_HOST"],
            "PORT": enviornment_var["DATABASE_PORT"],
            "OPTIONS": {
                "ssl_mode": "PREFERRED",
                "ssl": {
                    "ca": enviornment_var["DB_CERT_PATH"],  # Optional
                },
            },
        }
    }
    REST_FRAMEWORK = {
        "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
        "DEFAULT_RENDERER_CLASSES": [
            "rest_framework.renderers.JSONRenderer",
            "rest_framework.renderers.BrowsableAPIRenderer",
        ],
        "DATE_FORMAT": "%m-%d-%Y",
        "DEFAULT_PERMISSION_CLASSES": [
            "rest_framework.permissions.IsAuthenticatedOrReadOnly",
        ],
        "TIME_FORMAT": "%I:%M %p",
        "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
        "PAGE_SIZE": 10,
        "DEFAULT_THROTTLE_CLASSES": [
            "rest_framework.throttling.AnonRateThrottle",
            "rest_framework.throttling.UserRateThrottle",
        ],
        "DEFAULT_THROTTLE_RATES": {"anon": "20/minute", "user": "30/minute"},
        "DEFAULT_AUTHENTICATION_CLASSES": [
            "rest_framework.authentication.TokenAuthentication",
            "rest_framework.authentication.SessionAuthentication",
        ],
    }

    DJOSER = {"USER_ID_FIELD": "username"}
    SPECTACULAR_SETTINGS = {
        "TITLE": "Little Lemon Menu and Booking API",
        "CONTACT": {
            "name": "Terry Brooks",
            "url": "https://brooksjr.com",
            "email": "terry.brooks@blackberry-py.dev",
        },
        "DESCRIPTION": """<img src="https://cdn.jsdelivr.net/gh/Terry-BrooksJr/be_capstone@4a8b3aefa77fcee2b21704b10f8b5facb865ea2e/applications/resturant/static/restaurant/img/logo.png" alt="Little Lemon Logo" width="200" height="100">

<h2><strong>Welcome to the Little Lemon  Menu & Booking API, a RESTful API designed for inventory and reservation management.</strong></h2>
<p>This API provides endpoints for managing menu items and booking reservations at the Little Lemon restaurant.</p>
<p>With this API, you can:</p>
<ul>
`<li>View and manage menu items, including their titles, prices, and inventory.</li>
<li>Create, retrieve, update, and delete bookings for restaurant reservations.</li>
<li>Authenticate users and manage their sessions.</li>
<li>Access   API documentation for easy integration and usage.</li>; 

<aside style="        border: 2px solid #ccc; /* Light gray border */
        padding: 10px;
        margin: 1em 0; /* Add spacing around the callout */
        background-color: #f9f9f9; /* Very light gray background */
        border-radius: 4px;         border-color: #FF0000
; /* Green for tip */
 /* Rounded;
        ">
        <h3>Warning</h3>
        <p>This project is developed as a final assignment for Meta's Backend Engineering Capstone Course on Coursera by Terry Brooks. You can find the <href="https://www.coursera.org/learn/back-end-developer-capstone/home/info" target="_blank">course on Coursera</href> and the project source code on GitHub.
p>
    </aside>

> [!WARNING]
> This project is open-source for learning purposes, but please respect Courseraâ€™s academic honesty policy. Refer to the Coursera Honor Code for guidance.
""",
        "VERSION": "1.0.0",
        "LICENSE": {
            "name": "MIT",
            "url": "https://github.com/Terry-BrooksJr/be_capstone/blob/4ee1475031ed298a0d527b1ecfab0fc2136c1d9d/LICENSE",
        },
        "SCHEMA_PATH_PREFIX": "/restaurant",
        "SWAGGER_UI_DIST": "SIDECAR",
        "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
        "REDOC_DIST": "SIDECAR",
        "SECURITY": [
            {"TokenAuth": []},
        ],
        "SWAGGER_UI_SETTINGS": {
            "deepLinking": True,
            "persistAuthorization": True,
            "displayOperationId": False,
        },
        "AUTHENTICATION_SCHEMES": {
            "TokenAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "Authorization",
                "description": 'API Token passed via the Authorization header. Example: "Authorization: Token {token}"',
            },
        },
    }


class Grading(Base):
    DEBUG = False
    ALLOWED_HOSTS = ["little-lemon.xyz"]
    CSRF_TRUSTED_ORIGINST = (
        ["https://localhost", "http://localhost", "https://little-lemon.xyz"],
    )

    INSTALLED_APPS = [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "applications.resturant",  # Add this line
        "django_prometheus",
        "drf_redesign",
        "rest_framework",
        "rest_framework.authtoken",
        "django_filters",
        "crispy_forms",
        "crispy_bootstrap5",
        "drf_spectacular",
        "drf_spectacular_sidecar",
        "djoser",
    ]

    MIDDLEWARE = [
        "django_prometheus.middleware.PrometheusBeforeMiddleware",
        "django.middleware.security.SecurityMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        "django_prometheus.middleware.PrometheusAfterMiddleware",
    ]


class Development(Base):
    DEBUG = True
    ALLOWED_HOSTS = ["*"]
    CSRF_TRUSTED_ORIGINST = (["https://localhost ", "http://localhost"],)

    INSTALLED_APPS = [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "crispy_forms",
        "crispy_bootstrap5",
        "django_filters",
        "debug_toolbar",
        "applications.resturant",
        "django_prometheus",
        "drf_redesign",
        "rest_framework",
        "rest_framework.authtoken",
        "drf_spectacular",
        "drf_spectacular_sidecar",
        "djoser",
    ]
    DEBUG_TOOLBAR_CONFIG = {
        "RESULTS_CACHE_SIZE": 100,
        "IS_RUNNING_TESTS": False,
    }

    MIDDLEWARE = [
        "kolo.middleware.KoloMiddleware",
        "django_prometheus.middleware.PrometheusBeforeMiddleware",
        "django.middleware.security.SecurityMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "debug_toolbar.middleware.DebugToolbarMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        "django_prometheus.middleware.PrometheusAfterMiddleware",
    ]
