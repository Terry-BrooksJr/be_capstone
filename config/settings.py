"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.7.

"""

import os
import site
import sys
from os import environ as environment_var
from pathlib import Path
from typing import List

from configurations import Configuration
from django.http import HttpResponseForbidden

BASE_DIR = Path(__file__).resolve().parent.parent


def get_django_forms_templates_path() -> str | None:
    """Finds the path to the Django forms templates directory in site-packages.

    This function searches through all known site-packages directories to locate the directory containing Django's form templates.
    Falls back to searching sys.path for site-packages if not found.

    Returns:
        str or None: The path to the forms templates directory if found, otherwise None.
    """
    # Try all site-packages directories from the site module
    for site_dir in (*site.getsitepackages(), site.getusersitepackages()):
        forms_templates = os.path.join(site_dir, "django", "forms", "templates")
        if os.path.isdir(forms_templates):
            return forms_templates

    # Fallback: search sys.path for any site-packages directory
    for path in sys.path:
        if "site-packages" in path:
            forms_templates = os.path.join(path, "django", "forms", "templates")
            if os.path.isdir(forms_templates):
                return forms_templates
    return None


django_forms_templates_path = get_django_forms_templates_path()


class Base(Configuration):
    SECRET_KEY = environment_var["SECRET_KEY"]
    STATIC_URL = "static/"
    ROOT_URLCONF = "config.urls"
    # APPEND_SLASH=False
    WSGI_APPLICATION = "config.wsgi.application"
    LANGUAGE_CODE = "en-us"
    TIME_ZONE = "UTC"
    USE_I18N = True
    FORM_RENDERER = "django.forms.renderers.TemplatesSetting"
    USE_TZ = False
    INTERNAL_IPS = [
        "127.0.0.1",
    ]

    CORS_ALLOW_ALL_ORIGINS = True

    TEMPLATES = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [f"{BASE_DIR}/templates", django_forms_templates_path],
            "APP_DIRS": True,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.debug",
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                ],
            },
        },
    ]

    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": f'{environment_var["CACHE_CONNECTION_STRING"]}/{environment_var["CACHE_DB_NUMBER"]}',
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            },
        }
    }

    CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
    CRISPY_TEMPLATE_PACK = "bootstrap5"
    AUTH_PASSWORD_VALIDATORS = [
        {
            "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
        },
    ]
    # Set the required AWS credentials
    STATICFILES_LOCATION = "static"
    STATICFILES_STORAGE = "utils.backends.StaticStorage"

    AWS_ACCESS_KEY_ID = environment_var["DO_SPACES_KEY_ID"]
    AWS_SECRET_ACCESS_KEY = environment_var["DO_SPACES_SECRET_KEY"]
    AWS_STORAGE_BUCKET_NAME = environment_var["DO_SPACE_NAME"]

    AWS_S3_REGION_NAME = "nyc3"  # e.g. us-west-2
    AWS_S3_ENDPOINT_URL = f"https://{AWS_S3_REGION_NAME}.digitaloceanspaces.com"
    STATIC_URL = "/static/"

    STORAGES = {
        "default": {
            "BACKEND": "utils.backends.StaticStorage",
            "OPTIONS": {
                "access_key": AWS_ACCESS_KEY_ID,
                "secret_key": AWS_SECRET_ACCESS_KEY,
                "bucket_name": AWS_STORAGE_BUCKET_NAME,
                "endpoint_url": AWS_S3_ENDPOINT_URL,
                "region_name": AWS_S3_REGION_NAME,
            },
        },
        "staticfiles": {
            "BACKEND": "utils.backends.StaticStorage",
            "OPTIONS": {
                "access_key": AWS_ACCESS_KEY_ID,
                "secret_key": AWS_SECRET_ACCESS_KEY,
                "bucket_name": AWS_STORAGE_BUCKET_NAME,
                "endpoint_url": AWS_S3_ENDPOINT_URL,
                "region_name": AWS_S3_REGION_NAME,
            },
        },
    }
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": environment_var["DATABASE_NAME"],
            "USER": environment_var["DATABASE_USER"],
            "PASSWORD": environment_var["DATABASE_PASSWORD"],
            "HOST": environment_var["DATABASE_HOST"],
            "PORT": environment_var["DATABASE_PORT"],
            "OPTIONS": {
                "ssl_mode": "REQUIRED",
                "ssl": {
                    "ca": environment_var["DB_CERT_PATH"],  # Optional
                },
            },
        }
    }
    REST_FRAMEWORK = {
        "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
        "DEFAULT_RENDERER_CLASSES": [
            "rest_framework.renderers.JSONRenderer",
            "rest_framework.renderers.BrowsableAPIRenderer",
        ],
        "DATE_FORMAT": "%m-%d-%Y",
        "DEFAULT_PERMISSION_CLASSES": [
            "rest_framework.permissions.IsAuthenticatedOrReadOnly",
        ],
        "TIME_FORMAT": "%I:%M %p",
        "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
        "PAGE_SIZE": 10,
        "DEFAULT_THROTTLE_CLASSES": [
            "rest_framework.throttling.AnonRateThrottle",
            "rest_framework.throttling.UserRateThrottle",
        ],
        "DEFAULT_THROTTLE_RATES": {"anon": "20/minute", "user": "30/minute"},
        "DEFAULT_AUTHENTICATION_CLASSES": [
            "rest_framework.authentication.TokenAuthentication",
            "rest_framework.authentication.SessionAuthentication",
        ],
    }

    @staticmethod
    def _get_env_list(var_name: str, default: List[str] = []) -> List[str]:
        value = environment_var.get(var_name)
        if value is not None:
            return [item.strip() for item in value.split(",") if item.strip()]
        return default

    # BYTE_PATROL_ALLOWED_IPS = _get_env_list(
    #     "BYTE_PATROL_ALLOWED_IPS", ["127.0.0.1", "69.255.206.86"])
    BYTE_PATROL_ALLOWED_IPS = ["76.85.43.21"]

    BYTE_PATROL_PROTECTED_PATHS = _get_env_list(
        "BYTE_PATROL_PROTECTED_PATHS",
        [r"^/admin/.*$", r"^/checkup/?.*$", r"^/byte_patrol/protected/.*$"],
    )
    BYTE_PATROL_CACHE_TIMEOUT = 9000
    BYTE_PATROL_FORBIDDEN_RESPONSE = HttpResponseForbidden(
        "Access Denied: Your IP address is not allowed."
    )
    if "CACHE_CONNECTION_STRING" not in environment_var:
        raise RuntimeError(
            "CACHE_CONNECTION_STRING environment variable is required for REDIS_URL configuration."
        )
    REDIS_URL = environment_var["CACHE_CONNECTION_STRING"]
    DJOSER = {"USER_ID_FIELD": "username"}
    SPECTACULAR_SETTINGS = {
        "TITLE": "Little Lemon Menu and Booking API",
        "CONTACT": {
            "name": "Terry Brooks",
            "url": "https://brooksjr.com",
            "email": "terry.brooks@blackberry-py.dev",
        },
        "DESCRIPTION": """<img src="https://cdn.jsdelivr.net/gh/Terry-BrooksJr/be_capstone@4a8b3aefa77fcee2b21704b10f8b5facb865ea2e/applications/resturant/static/restaurant/img/logo.png" alt="Little Lemon Logo" width="200" height="100">

<h2><strong>Welcome to the Little Lemon  Menu & Booking API, a RESTful API designed for inventory and reservation management.</strong></h2>
<p>This API provides endpoints for managing menu items and booking reservations at the Little Lemon restaurant.</p>
<p>With this API, you can:</p>
<ul>
`<li>View and manage menu items, including their titles, prices, and inventory.</li>
<li>Create, retrieve, update, and delete bookings for restaurant reservations.</li>
<li>Authenticate users and manage their sessions.</li>
<li>Access   API documentation for easy integration and usage.</li>; 

<aside style="        border: .125rem solid #ccc; /* Light gray border */
        padding: .625rem;
        margin: 1em 0; /* Add spacing around the callout */
        background-color: #f9f9f9; /* Very light gray background */
        border-radius: .25rem;         border-color: #FF0000
; /* Green for tip */
 /* Rounded;
        ">
        <h3>Warning</h3>
        <p>This project is developed as a final assignment for Meta's Backend Engineering Capstone Course on Coursera by Terry Brooks. You can find the <href="https://www.coursera.org/learn/back-end-developer-capstone/home/info" target="_blank">course on Coursera</href> and the project source code on GitHub.
p>
    </aside>

> [!WARNING]
> This project is open-source for learning purposes, but please respect Courseraâ€™s academic honesty policy. Refer to the Coursera Honor Code for guidance.
""",
        "VERSION": "1.0.0",
        "LICENSE": {
            "name": "MIT",
            "url": "https://github.com/Terry-BrooksJr/be_capstone/blob/4ee1475031ed298a0d527b1ecfab0fc2136c1d9d/LICENSE",
        },
        "SCHEMA_PATH_PREFIX": "/restaurant",
        "SWAGGER_UI_DIST": "SIDECAR",
        "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
        "REDOC_DIST": "SIDECAR",
        "SECURITY": [
            {"TokenAuth": []},
        ],
        "SWAGGER_UI_SETTINGS": {
            "deepLinking": True,
            "persistAuthorization": True,
            "displayOperationId": False,
        },
        "AUTHENTICATION_SCHEMES": {
            "TokenAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "Authorization",
                "description": 'API Token passed via the Authorization header. Example: "Authorization: Token {token}"',
            },
        },
    }


class Grading(Base):
    DEBUG = False
    ALLOWED_HOSTS = [
        "little-lemon.xyz",
        "localhost",
        "203.161.47.138",
        "*",
        "9skx15r9-7575.usw3.devtunnels.ms",
    ]
    CSRF_TRUSTED_ORIGINS = [
        "https://localhost",
        "http://localhost",
        "https://little-lemon.xyz",
    ]
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
    SECURE_SSL_REDIRECT = False
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    INSTALLED_APPS = [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "applications.resturant",
        "django_prometheus",
        "drf_redesign",
        "rest_framework",
        "rest_framework.authtoken",
        "django_filters",
        "crispy_forms",
        "health_check",
        "health_check.db",
        "health_check.cache",
        "health_check.storage",
        "crispy_bootstrap5",
        "drf_spectacular",
        "drf_spectacular_sidecar",
        "health_check.contrib.redis",
        "health_check.contrib.s3boto3_storage",
        "health_check.contrib.psutil",
        "djoser",
        "corsheaders",
        "applications.byte_patrol",
    ]

    MIDDLEWARE = [
        "django_prometheus.middleware.PrometheusBeforeMiddleware",
        "django.middleware.cache.UpdateCacheMiddleware",
        "django.middleware.security.SecurityMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        "django.middleware.cache.FetchFromCacheMiddleware",
        "django_prometheus.middleware.PrometheusAfterMiddleware",
        "applications.byte_patrol.middleware.IPRestrictionMiddleware",
    ]


class Development(Base):
    DEBUG = True
    ALLOWED_HOSTS = ["*"]
    CSRF_TRUSTED_ORIGINS = ("https://localhost ", "http://localhost")

    INSTALLED_APPS = [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "crispy_forms",
        "crispy_bootstrap5",
        "django_filters",
        "debug_toolbar",
        "applications.resturant",
        "corsheaders",
        "django_prometheus",
        "drf_redesign",
        "rest_framework",
        "rest_framework.authtoken",
        "drf_spectacular",
        "health_check",  # required
        "health_check.db",  # stock Django health checkers
        "health_check.cache",
        "health_check.storage",
        "health_check.contrib.redis",  # requires Redis broker
        "health_ check.contrib.s3boto3_storage",  # requires boto3 and S3BotoStorage backend
        "health_check.contrib.psutil",  # disk and memory utilization; requires psutil
        "drf_spectacular_sidecar",
        "djoser",
        "applications.byte_patrol",
    ]
    DEBUG_TOOLBAR_CONFIG = {
        "RESULTS_CACHE_SIZE": 100,
        "IS_RUNNING_TESTS": False,
    }

    MIDDLEWARE = [
        "django_prometheus.middleware.PrometheusBeforeMiddleware",
        "django.middleware.cache.UpdateCacheMiddleware",
        "django.middleware.security.SecurityMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "corsheaders.middleware.CorsMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "debug_toolbar.middleware.DebugToolbarMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        "django.middleware.cache.FetchFromCacheMiddleware",
        "django_prometheus.middleware.PrometheusAfterMiddleware",
        "applications.byte_patrol.middleware.IPRestrictionMiddleware",
    ]
